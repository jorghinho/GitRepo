------------------------------------------------------------------------------------------------------------------------------------------------
--@Desc: Tool para importar personajes segun plantillas pregeneradas.
------------------------------------------------------------------------------------------------------------------------------------------------
(
	------------------------------------------------------------------------------------------------------------------------------------------------
	--@rollout: rollMain | Contiene la herramienta presetImporter.
	------------------------------------------------------------------------------------------------------------------------------------------------
	rollout rollMainDef "Preset Importer Tool"
	(
		------------------------------------------------------------------------------------------------
		--COMMON
		------------------------------------------------------------------------------------------------
		
		local parent = lb.getTool (lb.getFileToolName (getThisScriptFilename() as string)) --@var: string | parent | Herramienta o rolllout del que depende y/o contiene el rollout actual
		
		local minRollWidth = 740		--@var: integer | minRollWidth | Ancho mínimo de la herramienta.
		local minRollHeight = 900		--@var: integer | minRollHeight | Alto mínimo de la herramienta.
		
		------------------------------------------------------------------------------------------------
		--VARIABLES
		------------------------------------------------------------------------------------------------

		local greenColor = (dotNetClass "System.Drawing.Color").fromargb 0 255 0 
		local markColor = (dotNetClass "System.Drawing.Color").fromargb 200 60 60 
		local whiteColor = (dotNetClass "System.Drawing.Color").fromargb 240 240 240 
		local extraColor = (dotnetclass "System.Drawing.Color").fromARGB 255 200 200
		local mainColor = (dotnetclass "System.Drawing.Color").fromARGB 200 255 200
		local secondaryColor = (dotnetclass "System.Drawing.Color").fromARGB 200 200 255
		local _storedSceneValues = undefined --@var: array | _storedSceneValues | Array que guarda las configuraciones de la tool: #(Nodo de referencia, fichero de animacion asociado , Color celda 1 lv ,Tipo de personaje,Color de celda 2 lv) 
		
		------------------------------------------------------------------------------------------------
		--CONTROLS
		------------------------------------------------------------------------------------------------
		
		groupbox gbxManage "Manage Ref files" pos:[10,5] width: 720 height:45
		button btnImport "Import reference file" pos:[45,22] width:150
		button btnUpdate "Update from scene nodes" pos:[210,22] width:150
		button btnRemoveSel "Remove selected references" pos:[375,22] width:150
		button btnRemoveAll "Remove all references" pos:[540,22] width:150
		groupbox gbxCharType "Character Type" pos:[10,55] width: 720 height:30
 		radiobuttons rbtnCharMode labels:#("main","secondary","extra") columns:3 offsets:#([0,0],[-5,0],[10,0]) pos:[250,65] default:3
 		groupbox gbxSceneRefs "Scene References" width:350 height:685 pos:[10,90]
 		dotNetControl _sceneAssetsLv "System.Windows.Forms.ListView" pos:[20,110] width:330 height:650 
 		groupbox gbxAssetAnims "Asset Animations" width:350 height:685 pos:[380,90]
 		dotNetControl _assetAnimsLv "System.Windows.Forms.ListView" pos:[390,110] width:330 height:650 
 		groupbox gbxVisibility "Visibility Controls" pos:[10,780] width: 720 height:45
  		button btnIsolateAll "Isolate all references" pos:[100,797] width:150
 		button btnIsolateSelected "Isolate selected references" pos:[300,797] width:150
 		button btnMarkSel "Mark Selected" pos:[500,797] width:150
  		groupbox gbxLoadAssets "Asset Loading" pos:[10,830] width: 680 height:45
  		button btnSetAnim "Set animation to asset" tooltip:"Sets the animation to the first element of the selection" pos:[100,845] width:150
  		button btnLoadSel "Load selected assets" pos:[300,845] width:150
  		button btnLoadAll "Load all assets" pos:[500,845] width:150
  		button btnHalp pos:[700,840] width:30 height:30 tooltip:"Tool help" images:#((lb.config.getCustomIconsPath()) + "miscIcons001_16i.bmp", undefined, 50, 25, 25, 26, 26, true) 
 		colorpicker cpMarker pos:[650,797] color: (color 200 60 60 )
		
		------------------------------------------------------------------------------------------------
		--FUNCTIONS
		------------------------------------------------------------------------------------------------

		------------------------------------------------------------------------------
		--@fn: undefined | initList | Inicializa las listas con parametros comunes a todas
		--@gets: list | list | La lista a inicializar
		--@gets: boolean | multiselection | Inicializa la lista con o sin multiseleccion
		------------------------------------------------------------------------------
		fn initList list multiselection amount:1=
		(
			lv = list
			lv.columns.clear()
			lv.multiSelect = multiselection
			lv.gridLines = true
			lv.View = (dotNetClass "System.Windows.Forms.View").details
			lv.borderstyle = (dotnetclass "System.Windows.Forms.BorderStyle").fixedSingle
			lv.fullRowSelect = true
			lv.HideSelection = off
			lv.BackColor = (dotnetclass "System.Drawing.SystemColors").Menu
			lv.scrollable = true
			lv.labelWrap = True
			lv.labelEdit = false
			if amount == 1 then 
			(
				lv.columns.add "lista" (lv.width)
			)
			else 
			(
				lv.columns.add "lista" (2*lv.width/3)
				lv.columns.add "tipos" (lv.width/3)
			)
			lv.HeaderStyle = (dotNetClass "System.Windows.Forms.ColumnHeaderStyle").None
		)

		------------------------------------------------------------------------------
		--@fn: undefined | updateSceneAssetsList | Carga la lista de referencias en escena
		--@gets: (opt) boolean | _initArray | booleano para inicializar la variable de control _storedSceneValues de la tool
		------------------------------------------------------------------------------
		fn updateSceneAssetsList _initArray:false= 
		(
			_backupArray = #()
			--Si queremos inicializar la array borramos el contenido de la variable _storedSceneValues local en el ambito de la tool
			if _initArray == true do _storedSceneValues = #()
			--Limpiamos los items del listview para repintarlos
			_sceneAssetsLv.items.clear()
			--Recorremos todas las shapes de la escena
			_index = 0 
			for _shape in shapes do 
			(
				--Si la shape tiene 2 partes y es un char
				_shapeNameParts = FilterString _shape.name "_"
				if _shapeNameParts.count == 2  and (_shapeNameParts[1]==lb.nc.NC_chrPrefix) do --or _shapeNameParts[1]==lb.nc.NC_prpPrefix)*/ do 
				(
					--Añadimos el item al listview
					_sceneAssetsLv.items.add _shape.name
					_sceneAssetsLv.items.item[_index].subitems.add "extra" 
					_sceneAssetsLv.items.item[_index].subitems.item[1].backColor = (dotnetclass "System.Drawing.Color").fromARGB 255 200 200
					_sceneAssetsLv.items.item[_index].UseItemStyleForSubItems = false 
					_index += 1
					--Si la array se esta inicializando la inicialixzamos con el nodo, la string "noAnim", y el color blanco.
					if _initArray == true do  append _storedSceneValues #(_shape,"noAnim",whiteColor,"extra",extraColor)
				)
			)
			--Si no inicializamos la array pintaremos los campos con el color que teniamos guardado. [esto se pierde al cerrar la tool :'( ]
			if not _initArray do 
			(
				if _storedSceneValues.count > 0 do 
				(
					for i = 1 to _storedSceneValues.count do 
					(
						_sceneAssetsLv.items.item[i-1].subitems.item[0].backcolor = _storedSceneValues[i][3]
						_sceneAssetsLv.items.item[i-1].subitems.item[1].text = _storedSceneValues[i][4]
						_sceneAssetsLv.items.item[i-1].subitems.item[1].backcolor = _storedSceneValues[i][5]
					)
				)
			)
		)

		------------------------------------------------------------------------------
		--@fn: undefined | removeDeletedNodes | Función borra los nodos seleccionados y actualiza la variable _storedSceneValues si se han borrado nodos.
		------------------------------------------------------------------------------
		fn removeDeletedNodes = 
		(
			--Quitamos los callbacks para que no pete al cambiar los indices
			callbacks.removeScripts #selectionSetChanged id: #selectionChangeCallback
			clearSelection()
			--No tiene sentido hacer nada si no esta inicializada la variable
			if _storedSceneValues.count > 0 do 
			(
				--Cogemos los nodos que estan seleccionados en el listview
				_selectedAssets = _sceneAssetsLv.selecteditems
				for i = _selectedAssets.count-1 to 0 by -1 do 
				(
					--Primero borramos los hijos de los nodos (generalmente los planos que tienen alpha con el dibujo del personaje)
					for _child in _storedSceneValues[(_selectedAssets.item[i].Index)+1][1].children do 
					(
						delete _child
					)
					--Ahora borramos la shape de referencia una vez no cuelga nada de ella
					delete _storedSceneValues[(_selectedAssets.item[i].Index)+1][1]
					--finalmente borramos el registro de la array de gestión de la tool
					deleteItem _storedSceneValues ((_selectedAssets.item[i].Index)+1)
				)
			)
			--Actualizamos la lista de referencias
			updateSceneAssetsList()
			--Limpiamos la lista de animaciones ya que el registro seleccionado no existe
			_assetAnimsLv.items.clear()
			--Volvemos a poner el callback
			callbacks.addscript #selectionSetChanged "lb.presetImporter.rollMain.selectFromScene()" id: #selectionChangeCallback
		)

		------------------------------------------------------------------------------
		--@fn: undefined | importAndInit | Abre un dialogo para mergear el archivo de refs en escena y inicializa la var de info _storedSceneValues
		------------------------------------------------------------------------------		
		fn importAndInit = 
		(
			_refFile = getOpenFilename types:"Maxscript File (*.max)|*.max" caption: "Select the references File"

			if _refFile != undefined do 
			(
				--Mergeo del archivo de referncias que especifique el usuario.
				mergeMAXFile _refFile #deleteOldDups  #neverReparent quiet:true
			)
			updateSceneAssetsList _initArray:true
		)

		------------------------------------------------------------------------------
		--@fn: undefined | removeRefsOnScene | Se eliminan los shapes de referncia de la escena
		------------------------------------------------------------------------------		
		fn removeRefsOnScene = 
		(
			for i = _storedSceneValues.count to 1 by -1 do 
			(
				--Primero borramos los hijos de los nodos (generalmente los planos que tienen alpha con el dibujo del personaje)
				for _child in _storedSceneValues[i][1].children do 
				(
					delete _child
				)
				--Ahora borramos la shape de referencia una vez no cuelga nada de ella
				delete _storedSceneValues[i][1]
			)
			--Actualizamos la lista de referencias y limpiamos la array de contenido de la tool
			updateSceneAssetsList _initArray:true 
			--Limpiamos la lista de animaciones ya que el registro seleccionado no existe
			_assetAnimsLv.items.clear()
		)

		------------------------------------------------------------------------------
		--@fn: undefined | updateAssetAnimations | Actualiza el contenido de la lista de animaciones con el primer elemneto de la seleccion
		------------------------------------------------------------------------------	
		fn updateAssetAnimations = 
		(
			_assetAnimsLv.items.clear()

			_animPath = "Y:\\asset\\chr\\assetType\\character\\animation\\"

		 	_selectedAssets = _sceneAssetsLv.selecteditems

			if _selectedAssets.count > 0 do 
	 		(
	 			_assetType = _selectedAssets.item[0].subitems.item[1].text
	 			_animPath = substituteString _animPath "assetType" _assetType
	 			_tmpChar = (filterstring _selectedAssets.item[0].text "{")[1]
				_animPath = substituteString _animPath "character" _tmpChar
	 			_animPath += "*"
	 			_folders = getDirectories _animPath
	 			for _folder in _folders do 
	 			(
	 				_folderParts = FilterString _folder "\\"
	 				_animfile = (_folder+_folderParts[_folderParts.count]+".xaf")
	 				if doesFileExist _animFile do 
	 				(
	 					_item = _assetAnimsLv.items.add (_folderParts[_folderParts.count])
	 					_firstRef = try (_sceneAssetsLv.selecteditems.item[0].Index + 1) catch()
	 					if _firstRef != undefined do 
	 					(
	 						if matchpattern _storedSceneValues[_firstRef][2] pattern:("*"+_folderParts[_folderParts.count]+"*") do 
	 						(
	 							_item.backColor = greenColor
	 						)
	 					)
	 				)
	 			)
	 		)
			
		)

		------------------------------------------------------------------------------
		--@fn: undefined | connectAssetAnim | Funcion que asocia una animación al asset para su carga.
		------------------------------------------------------------------------------	
		fn connectAssetAnim =
		(
			_firstRef = try (_sceneAssetsLv.selecteditems.item[0].Index + 1) catch()
			_secondRef = try (_assetAnimsLv.selecteditems.item[0].Index + 1) catch()
			if (_firstRef != undefined) and (_secondRef != undefined) do 
			(
				_sceneAssetsLv.selecteditems.item[0].subitems.item[0].backColor = greenColor
				_assetAnimsLv.selecteditems.item[0].backcolor = greenColor

				_animPath = "Y:\\asset\\chr\\assetType\\character\\animation\\"

		 		_selectedAssets = _sceneAssetsLv.selecteditems
	
				if _selectedAssets.count > 0 do 
	 			(
	 				_assetType = _selectedAssets.item[0].subitems.item[1].text
	 				_animPath = substituteString _animPath "assetType" _assetType
	 				_tmpChar = (filterstring _selectedAssets.item[0].text "{")[1]
					_animPath = substituteString _animPath "character" _tmpChar
					_animPath += _assetAnimsLv.selecteditems.item[0].text + "\\" + _assetAnimsLv.selecteditems.item[0].text + ".xaf"
					_storedSceneValues[_firstRef][2] = _animPath
					_storedSceneValues[_firstRef][3] = greenColor
	 			)
			)
			updateAssetAnimations()
		)

		------------------------------------------------------------------------------
		--@fn: undefined | openAnimationVideo | Abre el video de animacion al hacer dobleClick en un item de la listview de animaciones
		------------------------------------------------------------------------------			
		fn openAnimationVideo = 
		(
			_firstRef = try (_sceneAssetsLv.selecteditems.item[0].Index + 1) catch()
			_secondRef = try (_assetAnimsLv.selecteditems.item[0].Index + 1) catch()
			if (_firstRef != undefined) and (_secondRef != undefined) do 
			(
				_animPath = "Y:\\asset\\chr\\assetType\\character\\animation\\"

		 		_selectedAssets = _sceneAssetsLv.selecteditems
	
				if _selectedAssets.count > 0 do 
	 			(
	 				_assetType = _selectedAssets.item[0].subitems.item[1].text
	 				_animPath = substituteString _animPath "assetType" _assetType
	 				_tmpChar = (filterstring _selectedAssets.item[0].text "{")[1]
					_animPath = substituteString _animPath "character" _tmpChar
					_animPath += _assetAnimsLv.selecteditems.item[0].text + "\\" + _assetAnimsLv.selecteditems.item[0].text + ".mov"
					ShellLaunch _animPath ""
	 			)
			)
		)
		------------------------------------------------------------------------------
		--@fn: undefined | markSelectedAssets | Funcion que pinta los elementos de la lista del color del colorpicker
		--@gets: color | aColor | Funcion que pinta los elementos de la lista del color del colorpicker
		------------------------------------------------------------------------------				
		fn markSelectedAssets aColor= 
		(
			_selectedAssets = _sceneAssetsLv.selecteditems
			for i=0 to _selectedAssets.count - 1 do 
			(
				(_storedSceneValues[(_selectedAssets.item[i].Index)+1][1]).wirecolor = cpMarker.color
				_selectedAssets.item[i].subitems.item[0].backColor = aColor
				_storedSceneValues[(_selectedAssets.item[i].Index)+1][3] = aColor
			)
		)

		------------------------------------------------------------------------------
		--@fn: undefined | selectFromList | Funcion de refresco de seleccion en escena para los elementos seleccionados de la listview de referencias
		------------------------------------------------------------------------------		
		fn selectFromList = 
		(
			_sel = #()
			if _storedSceneValues.count > 0 do 
			(
				_selectedAssets = _sceneAssetsLv.selecteditems
				for i=0 to _selectedAssets.count - 1 do 
				(
					append _sel _storedSceneValues[(_selectedAssets.item[i].Index)+1][1]
				)
			)
			select _sel
		)

		------------------------------------------------------------------------------
		--@fn: undefined | selectFromScene | Funcion de refresco de seleccion en listview para cambios de seleccion en escena 
		------------------------------------------------------------------------------	
		fn selectFromScene = 
		(
			for i = 1 to (_sceneAssetsLv.items.count) do _sceneAssetsLv.items.item[i-1].selected = false

			_sel = getCurrentSelection() 
			for _selectedItem in _sel do 
			(
				for i=1 to _storedSceneValues.count do 
				(
					if _selectedItem == _storedSceneValues[i][1] then
					(
						 _sceneAssetsLv.items.item[i-1].selected = true
					)
				)
			)
			updateAssetAnimations()
		)

		------------------------------------------------------------------------------
		--@fn: undefined | isolateReferences | Isola la selección actual/global de referencias y sus planos hijos.
		--@gets: boolean | _selected | Si es true se realiza sobre la selección, false sobre todos los nodos
		------------------------------------------------------------------------------	
		fn isolateReferences _selected:false = 
		(
			_objsToIsolate = #()
			for i=1 to _storedSceneValues.count do 
			(
				if _selected == false then 
				(
					for _child in _storedSceneValues[i][1].children do 
					(
						append _objsToIsolate _child
					)
					append _objsToIsolate _storedSceneValues[i][1]
				)
				else 
				(
					_sel = getCurrentSelection() 
					for _selectedItem in _sel do 
					(
						if _selectedItem == _storedSceneValues[i][1] do
						(
							for _child in _storedSceneValues[i][1].children do 
							(
								append _objsToIsolate _child
							)
							append _objsToIsolate _storedSceneValues[i][1]
						)
					)
				)
			)
			select _objsToIsolate
			IsolateSelection.EnterIsolateSelectionMode()
			clearSelection()
		)	

		------------------------------------------------------------------------------
		--@fn: undefined | linkObj | Añade un PointConstraint a la pieza referecia hacia el target.
		--@gets: node | _from | el nodo que recibe el point constraint
		-- @gets: node | _to | el nodo hacia el que se hace el point Constraint
		------------------------------------------------------------------------------	
		fn linkObj _from _to =
		(
			with animate off
			(
				-- Abrimos el panel modify para poder realizar la accion
				max modify mode 
				-- con la accion de animacion desactivada realizamos la operacion.
				select _from

				_pointData = lb.links.pointConstraint.getPointData _from

				for i=_pointData.pointLinks.count to 1 by -1 do 
				(
					lb.links.pointConstraint.deleteTarget _from i
				)
				lb.links.pointConstraint.addTarget _from _to
				clearselection()
			)
		)
		------------------------------------------------------------------------------
		--@fn: undefined | loadSelectedAssets | Carga los presets seleccionados
		------------------------------------------------------------------------------	
		fn loadSelectedAssets = 
		(
			if _storedSceneValues.count > 0 do 
			(
		 		_selectedAssets = _sceneAssetsLv.selecteditems
		 		_assetsToLoad = #()
	
				if _selectedAssets.count > 0 do 
	 			(
	 				for i = 1 to _selectedAssets.count do 
	 				(
	 					_arrayIndex = _selectedAssets.item[i-1].index
						_prtPath = "Y:\\asset\\chr\\assetType\\character\\version\\preset\\"
		 				_assetType = _selectedAssets.item[i-1].subitems.item[1].text
		 				_prtPath = substituteString _prtPath "assetType" _assetType
		 				_tmpChar = (filterstring _selectedAssets.item[i-1].text "{")[1]
						_prtPath = substituteString _prtPath "character" _tmpChar
						_toSearch = _selectedAssets.item[i-1].text + "_anim_v??.prt"
						_files = getFiles (_prtPath+_toSearch)
						_topVersionNumber = 0
						_topVersion = ""
						for _file in _files do 
						(
							_number = (filterstring _file "_")[5]
							_number = (filterstring _number ".")[1]
							_number = substituteString _number "v" ""

							if _topVersionNumber < (_number as integer) do 
							(
								_topVersionNumber = (_number as integer)
								_topVersion = _file
							)
						)
						_prtPath = _topVersion
						_assetRef = _storedSceneValues[_arrayIndex+1][1]
						_assetAnim = _storedSceneValues[_arrayIndex+1][2]
						append _assetsToLoad #(_prtPath,_assetRef,_assetAnim)

	 				)
					
	 				--print _assetsToLoad
	 				_showMessage = false 
	 				for _assetToLoad in _assetsToLoad do 
	 				(
						if doesFileExist _assetToLoad[1] do 
						(
							_loadedData = lb.presets.loadPreset _assetToLoad[1]
							_assets = lb.asset.getAssetsFromNodes (_loadedData.animNodes[1])
							_assetBase = lb.preAnimComposer.rollMain.getBaseNodeFromName _assets[1].fullname

							if _assetToLoad[3] != undefined and _assetToLoad[3] != "noAnim" do 
							(
								nodes = (lb.asset.getAssetAnimNodes  _assets[1] lb.nc.NC_classAnim) 
								nodesToRename =  _assets[1].animNodesAll --lb.asset.getAssetNodesByType a #(lb.nc.NC_classAnim)
								if cameras[1] != undefined then 
								(
									lb.asset.loadAnimation _assetToLoad[3] nodes nodesToRename relative:false insert:true insTime:(cameras[1].recStart as time)
								)
								else 
								(
									_showMessage = True 
								)
							)

							if _assetBase != undefined and _assetToLoad[2] != undefined do 
							(
								_assetBase.transform = _assetToLoad[2].transform
								linkObj _assetBase _assetToLoad[2] 
								--lb.controller.freezeTransform  _assetToLoad[2] #all
							)
						)
	 				)
					if _showMessage do 
					(
						lb.message.show "Unable to find Camera in Scene, cannot load anim."
					)
	 			)
			)
		)

		------------------------------------------------------------------------------
		--@fn: undefined | loadAllAssets | Carga todos los presets entre las referencias
		------------------------------------------------------------------------------	

		fn loadAllAssets = 
		(
			if _storedSceneValues.count > 0 do 
			(
				_assetsToLoad = #()
				for i = 1 to  _sceneAssetsLv.items.count do 
				(
					_prtPath = "Y:\\asset\\chr\\assetType\\character\\version\\preset\\"
	 				_assetType = _sceneAssetsLv.items.item[i-1].subitems.item[1].text
	 				_prtPath = substituteString _prtPath "assetType" _assetType
	 				_tmpChar = (filterstring _sceneAssetsLv.items.item[i-1].subitems.item[0].text "{")[1]
					_prtPath = substituteString _prtPath "character" _tmpChar
					_toSearch = _sceneAssetsLv.items.item[i-1].subitems.item[0].text + "_anim_v??.prt"
					_files = getFiles (_prtPath+_toSearch)

					_topVersionNumber = 0
					_topVersion = ""
					for _file in _files do 
					(
						_number = (filterstring _file "_")[5]
						_number = (filterstring _number ".")[1]
						_number = substituteString _number "v" ""

						if _topVersionNumber < (_number as integer) do 
						(
							_topVersionNumber = (_number as integer)
							_topVersion = _file
						)
					)
					_prtPath = _topVersion
					_assetRef = _storedSceneValues[i][1]
					_assetAnim = _storedSceneValues[i][2]
					append _assetsToLoad #(_prtPath,_assetRef,_assetAnim)

				)
			--	print _assetsToLoad
				_showMessage = false 
				for _assetToLoad in _assetsToLoad do 
 				(
					if doesFileExist _assetToLoad[1] do 
					(
						_loadedData = lb.presets.loadPreset _assetToLoad[1]
						_assets = lb.asset.getAssetsFromNodes (_loadedData.animNodes[1])
						_assetBase = lb.preAnimComposer.rollMain.getBaseNodeFromName _assets[1].fullname

						if _assetToLoad[3] != undefined and _assetToLoad[3] != "noAnim" do 
						(
							nodes = (lb.asset.getAssetAnimNodes  _assets[1] lb.nc.NC_classAnim) 
							nodesToRename =  _assets[1].animNodesAll --lb.asset.getAssetNodesByType a #(lb.nc.NC_classAnim)
							if cameras[1] != undefined then 
							(
								lb.asset.loadAnimation _assetToLoad[3] nodes nodesToRename relative:false insert:true insTime:(cameras[1].recStart as time)
							)
							else 
							(
								_showMessage = true 
							)
						)

						if _assetBase != undefined and _assetToLoad[2] != undefined do 
						(
							_assetBase.transform = _assetToLoad[2].transform
							linkObj _assetBase _assetToLoad[2] 
							lb.controller.freezeTransform  _assetToLoad[2] #all
						)
					)
 				)
				if _showMessage do 
				(
					lb.message.show "Unable to find Camera in Scene, cannot load anim."
				)
			)
		)

		
		------------------------------------------------
		--GETS
		------------------------------------------------

		------------------------------------------------
		--SETS
		------------------------------------------------
		
		------------------------------------------------
		--OTHER
		------------------------------------------------
		
		------------------------------------------------
		--COMMON
		------------------------------------------------
		
		------------------------------------------------
		--@fn: undefined | createSceneEvents | Crea los callbacks relacionados con el rollout
		------------------------------------------------
		fn createSceneEvents =
		(
			callbacks.addscript #selectionSetChanged "lb.presetImporter.rollMain.selectFromScene()" id: #selectionChangeCallback
		)
		
		------------------------------------------------
		--@fn: undefined | removeSceneEvents | Destruye los callbacks relacionados con el rollout
		------------------------------------------------
		fn removeSceneEvents =
		(
			callbacks.removeScripts #selectionSetChanged id: #selectionChangeCallback
		)
		
		------------------------------------------------
		--@fn: undefined | resize | Redimensiona el UI.
		--@gets: point2 | size | Tamaño nuevo del rollout
		------------------------------------------------
		fn resize size =
		(
			------------------------------------------------------------------------------
			--si la herramienta se redimensiona más pequeña que el mínimo, lo limita al minimo
			if size.x < minRollWidth then (size.x = minRollWidth; rollMainDef.width = size.x)
			if size.y < minRollHeight then (size.y = minRollHeight; rollMainDef.height = size.y)
			------------------------------------------------------------------------------
			
			--calcula el incremento en ancho y alto, respecto al mínimo.
			_increment = [size.x - minRollWidth, size.y - minRollHeight]
			
			------------------------------------------------------------------------------
			--redimension en horizontal
			if _increment.x != 0 then --si hay incremento
			(

				gbxManage.width = 720 + _increment.x
				btnImport.position.x = 45 + _increment.x/2
				btnUpdate.position.x = 210 + _increment.x/2
				btnRemoveSel.position.x = 375 + _increment.x/2
				btnRemoveAll.position.x = 540 + _increment.x/2

		 		gbxCharType.width = 720 + _increment.x
		 		rbtnCharMode.position.x = 250 + _increment.x/2

 				gbxSceneRefs.width = 350 + _increment.x/2
 				_sceneAssetsLv.width = 330 + _increment.x/2
 				gbxAssetAnims.position.x = 380 + _increment.x/2
 				gbxAssetAnims.width = 350 + _increment.x/2
 				_assetAnimsLv.position.x = 390 + _increment.x/2
 				_assetAnimsLv.width = 330 + _increment.x/2

  				gbxVisibility.width = 720 + _increment.x
  				btnIsolateAll.position.x = 100 + _increment.x/2
  				btnIsolateSelected.position.x = 300 + _increment.x/2
				btnMarkSel.position.x = 500 + _increment.x/2
				cpMarker.position.x = 650 + _increment.x/2

				gbxLoadAssets.width = 680 + _increment.x
				btnSetAnim.position.x = 100 + _increment.x/2
				btnLoadSel.position.x = 300 + _increment.x/2
  				btnLoadAll.position.x = 500 + _increment.x/2
				btnHalp.position.x = 700 + _increment.x

			)--if
			------------------------------------------------------------------------------
			
			------------------------------------------------------------------------------
			--redimension en vertical
			if _increment.y != 0 then --si hay incremento
			(
				
			)--if
			------------------------------------------------------------------------------
		)

		------------------------------------------------
		--@fn: undefined | saveSettings | Salva los settings de la herramienta en el documento de configuración de la misma.
		------------------------------------------------
		fn saveSettings =
		(
			--almacena posicion
			lb.xml.setAttribute parent.cfgFile ("rollMain/pos") "x" (((getDialogPos rollMainDef).x) as string)
			lb.xml.setAttribute parent.cfgFile ("rollMain/pos") "y" (((getDialogPos rollMainDef).y) as string)
			
			--almacena tamaño
			lb.xml.setAttribute parent.cfgFile ("rollMain/size") "width" (rollMainDef.width as string)
			lb.xml.setAttribute parent.cfgFile ("rollMain/size") "height" (rollMainDef.height as string)
		)
		
		------------------------------------------------
		--@fn: undefined | loadSettings | Carga los settings de la herramienta en el documento de configuración de la misma.
		------------------------------------------------
		fn loadSettings =
		(
			_width = undefined 
			_height = undefined 
			_posX = undefined 
			_posY = undefined

			if doesFileExist parent.cfgFile do 
			(
				--------------------------------------------------------------------------------
				--Los parametros de la tool leídos del xml de config van aqui

				-- ancho y alto del rollout
				_width = (lb.xml.getAttribute parent.cfgFile ("rollMain/size") "width") as integer
				_height = (lb.xml.getAttribute parent.cfgFile ("rollMain/size") "height") as integer
					
				--posicion
				_posX = (lb.xml.getAttribute parent.cfgFile ("rollMain/pos") "x") as integer
				_posY = (lb.xml.getAttribute parent.cfgFile ("rollMain/pos") "y") as integer


				--------------------------------------------------------------------------------
			)	
			
			--establece minimos
			if _width == undefined then _width = minRollWidth
			else if _width < minRollWidth then _width = minRollWidth
			
			if _height == undefined then _height = minRollHeight
			else if _height < minRollHeight then _height = minRollHeight
			
			if _posX == undefined then _posX = 0
			else if _posX < 0 then _posX = 0
			
			if _posY == undefined then _posY = 0
			if _posY < 0 then _posY = 0
				
			--aplica los valores
			rollMainDef.width = _width
			rollMainDef.height = _height
			setDialogPos rollMainDef [_posX,_posY]
		)
		
		------------------------------------------------------------------------------------------------
		--EVENTS
		------------------------------------------------------------------------------------------------
		
		------------------------------------------------
		--COMMON
		------------------------------------------------

		------------------------------------------------
		--@event: pressed | Evento que se lanza al apretar el boton
		--@control: button  | btnLoadSel | Elemento que dispara el evento
		------------------------------------------------
		on btnLoadSel pressed do 
		(
			loadSelectedAssets()
		)

		------------------------------------------------
		--@event: pressed | Evento que se lanza al apretar el boton
		--@control: button  | btnLoadAll | Elemento que dispara el evento
		------------------------------------------------
		on  btnLoadAll pressed do 
		(
			loadAllAssets()
		)
		------------------------------------------------
		--@event: changed | Evento que se lanza al cambiar la opcion del radiobutton
		--@control: radiobutton  | rbtnCharMode | Elemento que dispara el evento
		------------------------------------------------
		on rbtnCharMode changed value do 
		(
			if _storedSceneValues.count > 0 do 
			(
				_selectedAssets = _sceneAssetsLv.selecteditems
				for i=0 to _selectedAssets.count - 1 do 
				(
					case value of 
					(
						1:
						(
							_selectedAssets.item[i].subitems.item[1].backColor = mainColor
							_selectedAssets.item[i].subitems.item[1].text = "main"
							_storedSceneValues[(_selectedAssets.item[i].Index)+1][4] = "main"
							_storedSceneValues[(_selectedAssets.item[i].Index)+1][5] = mainColor
						)
						2:
						(
							_selectedAssets.item[i].subitems.item[1].backColor = secondaryColor
							_selectedAssets.item[i].subitems.item[1].text = "secondary"
							_storedSceneValues[(_selectedAssets.item[i].Index)+1][4] = "secondary"
							_storedSceneValues[(_selectedAssets.item[i].Index)+1][5] = secondaryColor
						)
						3:
						(
							_selectedAssets.item[i].subitems.item[1].backColor = extraColor
							_selectedAssets.item[i].subitems.item[1].text = "extra"
							_storedSceneValues[(_selectedAssets.item[i].Index)+1][4] = "extra"
							_storedSceneValues[(_selectedAssets.item[i].Index)+1][5] = extraColor
						)
					)
				)
			)
			updateAssetAnimations()
		)

		------------------------------------------------
		--@event: changed | Evento que se lanza al cambiar el color
		--@control: colorpicker | cpMarker | Elemento que dispara el evento
		------------------------------------------------
		on cpMarker changed nColor do 
		(
			markColor = (dotNetClass "System.Drawing.Color").fromargb nColor.r nColor.g nColor.b 
		)

		------------------------------------------------
		--@event: Click | Evento que se lanza al pulsar sobre la listview
		--@control: listview | _sceneAssetsLv | Elemento que dispara el evento
		------------------------------------------------
		on _sceneAssetsLv Click events do 
		(
			selectFromList()
			updateAssetAnimations()
		)

		on _assetAnimsLv doubleClick events do 
		(		
			openAnimationVideo()
		)
		------------------------------------------------
		--@event: pressed | Evento que se lanza al pulsar el boton
		--@control: button | btnMarkSel | Boton que dispara el evento
		------------------------------------------------		
		on btnMarkSel pressed do 
		(
			markSelectedAssets markColor
		)

		------------------------------------------------
		--@event: pressed | Evento que se lanza al pulsar el boton
		--@control: button | btnIsolateAll | Boton que dispara el evento
		------------------------------------------------
		on btnIsolateAll pressed do 
		(
			isolateReferences()
		)

		------------------------------------------------
		--@event: pressed | Evento que se lanza al pulsar el boton
		--@control: button | btnIsolateSelected | Boton que dispara el evento
		------------------------------------------------
		on btnIsolateSelected pressed do 
		(
			isolateReferences _selected:true
		)

		------------------------------------------------
		--@event: pressed | Evento que se lanza al pulsar el boton
		--@control: button | btnSetAnim | Boton que dispara el evento
		------------------------------------------------
		on btnSetAnim pressed do 
		(
			connectAssetAnim()
		)

		------------------------------------------------
		--@event: pressed | Evento que se lanza al pulsar el boton
		--@control: button | btnImport | Boton que dispara el evento
		------------------------------------------------
		on btnImport pressed do 
		(
			importAndInit()
		)

		------------------------------------------------
		--@event: pressed | Evento que se lanza al pulsar el boton
		--@control: button | btnUpdate | Boton que dispara el evento
		------------------------------------------------
		 on btnUpdate pressed do 
		 (
		 	updateSceneAssetsList _initArray:true
		 )
		
		------------------------------------------------
		--@event: pressed | Evento que se lanza al pulsar el boton
		--@control: button | btnRemoveSel | Boton que dispara el evento
		------------------------------------------------
		on btnRemoveSel pressed do 
		(
			removeDeletedNodes()
		)

		------------------------------------------------
		--@event: pressed | Evento que se lanza al pulsar el boton
		--@control: button | btnRemoveAll | Boton que dispara el evento
		------------------------------------------------
		on btnRemoveAll pressed do 
		(
			removeRefsOnScene()
		)

		------------------------------------------------
		--@event: resized | Evento que se lanza al redimensionar el rollout.
		--@control: rollout | rollMain | El elemento que sufre la redimensión. El rollout principal de la herramienta.
		------------------------------------------------
		on rollMainDef resized size do
		(
			resize size
		)
		
		------------------------------------------------
		--@event: open | Evento que se lanza al abrir el rollout.
		--@control: rollout | rollMain | El elemento que se abre. El rollout principal de la herramienta.
		------------------------------------------------
		on rollMainDef open do
		(
			loadSettings()
			createSceneEvents() --crea los callbacks
			if parent.rollMain != undefined then resize [parent.rollMain.width, parent.rollMain.height]
			initList _sceneAssetsLv True amount:2
			initList _assetAnimsLv False 
			updateSceneAssetsList _initArray:true
		)
		
		------------------------------------------------
		--@event: close | Evento que se lanza al cerrar el rollout.
		--@control: rollout | rollMain | El elemento que se cierra. El rollout principal de la herramienta.
		------------------------------------------------
		on rollMainDef close do
		(
			removeSceneEvents() --elimina los callbacks
			saveSettings()
			
			parent.opened = false --indica que la herramienta está cerrada.
			updateToolbarButtons()
		)
	)--rollMainDef
	
	------------------------------------------------------------------------------------------------------------------------------------------------
	--@struct: tl_presetImporter | Contiene la herramienta presetImporter.
	------------------------------------------------------------------------------------------------------------------------------------------------
	struct tl_presetImporter
	(
		------------------------------------------------------------------------------------------------
		--COMMON
		------------------------------------------------------------------------------------------------
		
		def = (classof this),				--@var: string  | def | Almacena la definicion del struct.
		defFile = getThisScriptFilename(),	--@var: string  | defFile | Almacena la ruta del propio archivo de script que contiene la definicion.
		
		category = #main,					--@var: name | category | Categoria de la tool.
		className = lb.getFileToolName (getThisScriptFilename() as string),	--@var: string | className | Nombre de la tool.
		description = "Tool presetImporter",		--@var: string | description | Descripcion de la tool.
		
		cfgFile = (lb.config.getToolsIniPath()) + (lb.getFileToolName (getThisScriptFilename() as string)) + ".cfg",	--@var: string | cfgFile | Archivo de configuracion de la tool.
			
		opened = false,			--@var: boolean | opened | Indica si la herramienta está abierta.
			
		------------------------------------------------------------------------------------------------
		--VARIABLES
		------------------------------------------------------------------------------------------------
			
		------------------------------------------------------------------------------------------------
		--LIBRARIES
		------------------------------------------------------------------------------------------------
		
		------------------------------------------------------------------------------------------------
		--ROLLOUTS
		------------------------------------------------------------------------------------------------
		
		rollMain = rollMainDef,	--@var: rollout | rollMain | Almacena el rollout principal de la herramienta.
			
		------------------------------------------------------------------------------------------------
		--FUNCTIONS
		------------------------------------------------------------------------------------------------
			
		------------------------------------------------
		--GETS
		------------------------------------------------
		
		------------------------------------------------
		--SETS
		------------------------------------------------
		
		------------------------------------------------
		--OTHER
		------------------------------------------------
		
		------------------------------------------------
		--COMMON
		------------------------------------------------
		
		------------------------------------------------
		--@fn: boolean | isOpen | Devuelve información true o false, si la herramienta está abierta o cerrada.
		------------------------------------------------
		fn isOpen =
		(
			this.opened
		),
		
		------------------------------------------------
		--@fn: undefined | refreshInterface | Refresca el interface inicial de la herramienta
		------------------------------------------------
		fn refreshInterface =
		(
			--refresca el interface de la herramienta
		),
		
		------------------------------------------------
		--@fn: undefined | createInterface | Crea el interface inicial de la herramienta
		------------------------------------------------
		fn createInterface =
		(
			--crea el interface, lo redimensiona y lo reposiciona
			createDialog this.rollMain lockwidth:false lockheight:false pos:[-10000,0] style:#(#style_toolwindow, #style_titlebar, #style_sysmenu, #style_resizing)
		),
		
		------------------------------------------------
		--@fn: undefined | destroyInterface | Destruye el interface de la herramienta.
		------------------------------------------------
		fn destroyInterface =
		(
			destroyDialog this.rollMain --cierra la herramienta.			
		),--destroyInterface
		
		------------------------------------------------
		--@fn: undefined | run | Lanza la herramienta.
		------------------------------------------------
		fn run =
		(
			this.createInterface() --crea el interface.
			this.opened = true --indica que la herramienta está abierta
		),--execute
		
		------------------------------------------------
		--@fn: undefined | close | Cierra la herramienta.
		------------------------------------------------
		fn close =
		(
			this.destroyInterface() --destruye el interface.
			this.opened = false --indica que la herramienta está cerrada.
		),
		
		------------------------------------------------
		--@fn: undefined | initSubLibraries | Inicializa todas las sublibrerías en el orden establecido.
		------------------------------------------------
		fn initSubLibraries =
		(
			_subLibraries = #()
			
			for sl in _subLibraries do sl.init()
		),
		
		------------------------------------------------
		--@fn: undefined | init | Inicializa la librería.
		------------------------------------------------
		fn init =
		(		
			this.initSubLibraries() --inicialza las librerías hijas
		),		
		
		------------------------------------------------------------------------------------------------
		--EVENTS
		------------------------------------------------------------------------------------------------
		
		------------------------------------------------
		--@event: create | Ejecución al crearse la instancia del struct.
		------------------------------------------------
		on create do
		(
			lb.addTool this --añade la tool a la libreria principal	
		)		
		
	)--tl_presetImporter
	
	------------------------------------------------------------------------------------------------------------------------------------------------
	--EXECUTION
	------------------------------------------------------------------------------------------------------------------------------------------------	
	
	tl_presetImporter() --crea la herramienta
)