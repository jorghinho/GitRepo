------------------------------------------------------------------------------------------------------------------------------------------------
--@Desc: libreria de documentación
------------------------------------------------------------------------------------------------------------------------------------------------
(	
	------------------------------------------------------------------------------------------------------------------------------------------------
	--@struct: templateLib | Contiene la libreria de documentación.
	------------------------------------------------------------------------------------------------------------------------------------------------
	struct lib_documentation
	(
		------------------------------------------------------------------------------------------------
		--COMMON
		------------------------------------------------------------------------------------------------
		
		def = (classof this),				--@var: string | def | Almacena la definicion del struct.
		defFile = getThisScriptFilename(),	--@var:  string | defFile | Almacena la ruta del propio archivo de script que contiene la definicion.
		
		category = #main,					--@var: name | category | Categoria de la libreria.
		className = lb.getFileLibName (getThisScriptFilename() as string),	--@var:  string | className | Nombre de la libreria.
		description = "Libreria de documentacion",	--@var:  string | description | Descripcion de la libreria.
		
		------------------------------------------------------------------------------------------------
		--VARIABLES
		------------------------------------------------------------------------------------------------

		pathToWiki = "\\\\jsilvestre\\pages\\", --@var:  string | pathToWiki | Path absoluto a la root de la wiki.
			
		------------------------------------------------------------------------------------------------
		--LIBRARIES
		------------------------------------------------------------------------------------------------
		
		------------------------------------------------------------------------------------------------
		--FUNCTIONS
		------------------------------------------------------------------------------------------------

		------------------------------------------------
		--@fn: string | getDocFilePath | Devuelve el path de documentación para la tool suministrada
		--@gets: file | file | El nombre (classname) de la libreria, si no se le suministra abre un opendialog para buscar el archivo.
		--@returns: string | _resource | El path del archivo dentro de la libreria.
		------------------------------------------------		
		fn getDocFilePath _file =
		(
			_resource = undefined
			if _file == undefined then 
			(
				_resource = getOpenFilename types:"Maxscript File (*.ms)|*.ms" caption: "Select the Resource to generate the documentation" filename:(lb.config.getScriptsPath())
			)
			else 
			(
				_tool = (lb.getTool _file)
				if _tool != undefined do _resource = _tool.defFile  

				_script = (lb.getScript _file)
				if _script != undefined do _resource = _script.defFile 

				_library = (lb.getLibrary _file)
				if _library != undefined do _resource = _library.defFile  
			)

			_resource
		),

		------------------------------------------------
		--@fn: boolean | generateDoc | Crea el archivo de texto de documentación de la tool.
		--@gets: (opt) _resourcePath | file | El path al fichero
		--@returns: boolean | _success | Devuelve si la operación se ha realizado correctamente.
		------------------------------------------------			
		fn generateDoc _resourcePath:undefined = 
		(
			--Obtenemos el path de la tool suministrada
			if _resourcePath == undefined then 
			(
				_resourcePath = getOpenFilename types:"Maxscript File (*.ms)|*.ms" caption: "Select the Resource to generate the documentation" filename:(lb.config.getScriptsPath())
			)

			if _resourcePath != undefined do 
			(
				--Obtenemos la definición del fichero para crear el txt correspondiente.
				_resourceParts = FilterString _resourcePath "\\"
				_fileType = (filterstring _resourceParts[_resourceParts.count] "_")[1]
				_fileName = (filterstring ((filterstring _resourceParts[_resourceParts.count] "_")[2]) ".")[1]

				--Abrimos el fichero de la tool en modo lectura
				_f = openFile _resourcePath mode:"r"
				if _f != undefined do 
				(
					--En esta array se almacenaran en orden todos los tags de comentario, --@
					_docuInfo = #()
					while not EOF _f do
					(
						local _currLine = readLine _f
						if matchpattern _currLine pattern:"*--@*" do 
						(
							append _docuInfo _currLine
						)
					)

					_documentation = #()
					--print _docuInfo
					--hay que filtrar a una nueva array el contenido. #(Descripcion resource, #(vars),#(functions))
					for _line in _docuInfo do 
					(
						_success = false

						--miramos en que posicion se encuentra el caracter --@
						_offset = findString _line "--@"
						--limpiamos la string de cosas que pueda tener antes para quedarnos solo con la definicion del comentario.
						_filteredString = substring _line _offset _line.count

						_currIndex = 1 
						--buscaremos la cabezera
						_stop = false
						--Aqui se guarda la definicion o heading 	
						_heading = ""
						--aqui se guarda el contenido (tantos registros como | encontremos)
						_contents =#()
						for i = 1 to _filteredString.count where not _stop do
						(
							if _filteredString[i] == ":" then _stop = true
							else 
							(
								_heading += _filteredString[i]
								_currIndex = i
							)
						) 

						--Si el indice que busca el heading llega hasta el final de la linea significa 
						if _currIndex == _filteredString.count do _success = false

						_heading = substituteString _heading "--@" ""

						_filteredString = substring _filteredString (_currIndex+2) _filteredString.count

						_docuRow = #()
						_filteredParts = FilterString _filteredString "|"
						for i = 1 to _filteredParts.count do 
						(
							if _filteredParts[i][1]==" " do  _filteredParts[i][1] = ""
							if _filteredParts[i][_filteredParts[i].count]==" " do  _filteredParts[i][_filteredParts[i].count] = ""
							append _contents _filteredParts[i]
						)
						if _heading != "control" and _heading != "event" do 
						(
							append _docuRow _heading 
							append _docuRow _contents
							append _documentation _docuRow
						)
					)
					--print _documentation

					--Una vez almacenados todos los comentarios se creará el archivo txt para la infomacion.

					_txtPath = lb.config.getToolsDocPath() + ((filterstring _resourceParts[_resourceParts.count] ".")[1]) + ".txt"
					_codeTxtPath = lb.config.getToolsDocPath() + ((filterstring _resourceParts[_resourceParts.count] ".")[1]) + "_code.txt"
					_txtPath = substituteString _txtPath (_fileType + "_" ) ""
					_codeTxtPath = substituteString _codeTxtPath (_fileType + "_" ) ""
					
					_process = true
					--Si el archivo de docu existe preguntamos si quiere sobreescribirlo.
					/*if doesFileExist _txtPath do 
					(
						_process = lb.message.show ("file "+_txtPath+" already exists,\n Delete old file? ") type:#query
						if _process do 
						(
							deletefile _txtPath
						)
					)*/
					if _process do 
					(
						--Si es un fichero de tipo passmanagerUI para que no colapse con el fichero pmov que contiene el codigo le añadiremos UI antes del nombre de los ficheros de txt
						if _fileType == "pmovUI" do 
						(
							_tmpFile = FilterString _txtPath "\\"
							_txtPath = substituteString _txtPath _tmpFile[_tmpFile.count] ("UI"+_tmpFile[_tmpFile.count])
							_tmpFile = FilterString _codeTxtPath "\\"
							_codeTxtPath = substituteString _codeTxtPath _tmpFile[_tmpFile.count] ("UI"+_tmpFile[_tmpFile.count])
						)

						_infoFile = createFile _txtPath
						--print _infoFile
						_codeFile = createFIle _codeTxtPath
						--print _codeFile

						--Aqui va la definicion del archivo de texto.
						_heading = "======= "
						case _fileType of 
						(
							"lib": _heading += "Libreria "
							"pmov": _heading += "Override "
							"pmovUI": _heading += "Common Properties Override "
							"rsa": _heading += "Rig Solution "
							"rse": _heading += "Rig Solution "
							"rss": _heading += "Rig Solution "
							"sc": _heading += "Script "
							"tl": _heading += "Tool "
							default: 
								(
									_heading += (lb.message.show "Tipo de archivo no definido, entrar el tipo manualmente" type:#queryString ) + " "
									_fileType = "other"
								)
						)
						_heading+= (_fileName + " =======\n\n")
						
						format _heading to:_codeFile
						format _heading to:_infoFile

						_firstLink = undefined 
						_secondLinkToInfo = undefined 
						_secondLinkToCode = undefined 

						--Generaremos los links hacia la carpeta superior  HAY QUE CONFIRMAR QUE TIPOS NECESITAN DOCUMENTACION GENERICA Y CUALES NO
						case _fileType of 
						(
							"lib": 
							(
								_firstLink =  "[[start:Librerias|Volver al directorio superior]]\n\n"
								_txtStripToInfo = ((filterstring _resourceParts[_resourceParts.count] ".")[1])
								_txtStripToInfo = substituteString _txtStripToInfo (_fileType + "_" ) ""
								_txtStripToCode = ((filterstring _resourceParts[_resourceParts.count] ".")[1]) + "_code"
								_txtStripToCode = substituteString _txtStripToCode (_fileType + "_" ) ""
								_secondLinkToCode = "[[Librerias: " + _txtStripToCode + "|Enlace a la documentacion del codigo de la libreria]]\n\n"
								_secondLinkToInfo = "[[Librerias: " + _txtStripToInfo + "|Enlace a la documentacion general de la libreria]]\n\n"
							)

							"pmov": 
							(
								_firstLink =  "[[start:PassManager|Volver al directorio superior]]\n\n"
								_txtStripToInfo = ((filterstring _resourceParts[_resourceParts.count] ".")[1])
								_txtStripToInfo = substituteString _txtStripToInfo (_fileType + "_" ) ""
								_txtStripToCode = ((filterstring _resourceParts[_resourceParts.count] ".")[1]) + "_code"
								_txtStripToCode = substituteString _txtStripToCode (_fileType + "_" ) ""
								_secondLinkToCode = "[[PassManager: " + _txtStripToCode + "|Enlace a la documentacion del codigo del override]]\n\n"
								_secondLinkToInfo = "[[PassManager: " + _txtStripToInfo + "|Enlace a la documentacion general del override]]\n\n"
							)
							"pmovUI": 
							(
								_firstLink =  "[[start:PassManager|Volver al directorio superior]]\n\n"
								_txtStripToInfo = ((filterstring _resourceParts[_resourceParts.count] ".")[1])
								_txtStripToInfo = substituteString _txtStripToInfo (_fileType + "_" ) "UI"
								_txtStripToCode = ((filterstring _resourceParts[_resourceParts.count] ".")[1]) + "_code"
								_txtStripToCode = substituteString _txtStripToCode (_fileType + "_" ) "UI"
								_secondLinkToCode = "[[PassManager: " + _txtStripToCode + "|Enlace a la documentacion del codigo del override]]\n\n"
								_secondLinkToInfo = "[[PassManager: " + _txtStripToInfo + "|Enlace a la documentacion general del override]]\n\n"
							)
							"rsa": 
							(
								_firstLink =  "[[start:RigSolution|Volver al directorio superior]]\n\n"
								_txtStripToInfo = ((filterstring _resourceParts[_resourceParts.count] ".")[1])
								_txtStripToInfo = substituteString _txtStripToInfo (_fileType + "_" ) ""
								_txtStripToCode = ((filterstring _resourceParts[_resourceParts.count] ".")[1]) + "_code"
								_txtStripToCode = substituteString _txtStripToCode (_fileType + "_" ) ""
								_secondLinkToCode = "[[RigSolution: " + _txtStripToCode + "|Enlace a la documentacion del codigo de la solucion de rig]]\n\n"
								_secondLinkToInfo = "[[RigSolution: " + _txtStripToInfo + "|Enlace a la documentacion general de la solucion de rig]]\n\n"
							)
							"rse": 
							(
								_firstLink =  "[[start:RigSolution|Volver al directorio superior]]\n\n"
								_txtStripToInfo = ((filterstring _resourceParts[_resourceParts.count] ".")[1])
								_txtStripToInfo = substituteString _txtStripToInfo (_fileType + "_" ) ""
								_txtStripToCode = ((filterstring _resourceParts[_resourceParts.count] ".")[1]) + "_code"
								_txtStripToCode = substituteString _txtStripToCode (_fileType + "_" ) ""
								_secondLinkToCode = "[[RigSolution: " + _txtStripToCode + "|Enlace a la documentacion del codigo de la solucion de rig]]\n\n"
								_secondLinkToInfo = "[[RigSolution: " + _txtStripToInfo + "|Enlace a la documentacion general de la solucion de rig]]\n\n"
							)
							"rss": 
							(
								_firstLink =  "[[start:RigSolution|Volver al directorio superior]]\n\n"
								_txtStripToInfo = ((filterstring _resourceParts[_resourceParts.count] ".")[1])
								_txtStripToInfo = substituteString _txtStripToInfo (_fileType + "_" ) ""
								_txtStripToCode = ((filterstring _resourceParts[_resourceParts.count] ".")[1]) + "_code"
								_txtStripToCode = substituteString _txtStripToCode (_fileType + "_" ) ""
								_secondLinkToCode = "[[RigSolution: " + _txtStripToCode + "|Enlace a la documentacion del codigo de la solucion de rig]]\n\n"
								_secondLinkToInfo = "[[RigSolution: " + _txtStripToInfo + "|Enlace a la documentacion general de la solucion de rig]]\n\n"
							)
							"sc":
							(
								_firstLink =  "[[start:RigSolution|Volver al directorio superior]]\n\n"
								_txtStripToInfo = ((filterstring _resourceParts[_resourceParts.count] ".")[1])
								_txtStripToInfo = substituteString _txtStripToInfo (_fileType + "_" ) ""
								_txtStripToCode = ((filterstring _resourceParts[_resourceParts.count] ".")[1]) + "_code"
								_txtStripToCode = substituteString _txtStripToCode (_fileType + "_" ) ""
								_secondLinkToCode = "[[Scripts: " + _txtStripToCode + "|Enlace a la documentacion del codigo del script]]\n\n"
								_secondLinkToInfo = "[[Scripts: " + _txtStripToInfo + "|Enlace a la documentacion general del script]]\n\n"								
							)
							"tl": 
							(
								_firstLink =  "[[start:Tools|Volver al directorio superior]]\n\n"
								_txtStripToInfo = ((filterstring _resourceParts[_resourceParts.count] ".")[1])
								_txtStripToInfo = substituteString _txtStripToInfo (_fileType + "_" ) ""
								_txtStripToCode = ((filterstring _resourceParts[_resourceParts.count] ".")[1]) + "_code"
								_txtStripToCode = substituteString _txtStripToCode (_fileType + "_" ) ""
								_secondLinkToCode = "[[Tools: " + _txtStripToCode + "|Enlace a la documentacion del codigo de la tool]]\n\n"
								_secondLinkToInfo = "[[Tools: " + _txtStripToInfo + "|Enlace a la documentacion general de la tool]]\n\n"
							)
							"other": 
							(
								_firstLink =  "[[start:Other|Volver al directorio superior]]\n\n"
								_txtStripToInfo = ((filterstring _resourceParts[_resourceParts.count] "_.")[2])
								_txtStripToInfo = substituteString _txtStripToInfo (_fileType + "_" ) ""
								_txtStripToCode = ((filterstring _resourceParts[_resourceParts.count] "_.")[2]) + "_code"
								_txtStripToCode = substituteString _txtStripToCode (_fileType + "_" ) ""
								_secondLinkToCode = "[[Other: " + _txtStripToCode + "|Enlace a la documentacion del codigo ]]\n\n"
								_secondLinkToInfo = "[[Other: " + _txtStripToInfo + "|Enlace a la documentacion general ]]\n\n"
							)
						)
					--	print _firstLink
					--	print _secondLinkToInfo
					--	print _secondLinkToCode
						--Guardamos los links al directorio superior y al archivo de codigo y de documentación respectivamente
						format _firstLink to:_codeFile
						format _firstLink to:_infoFile
						format _secondLinkToInfo to:_codeFile
						format _secondLinkToCode to:_infoFile

						--Un indice de control para el iterador, en caso de que no haya descripción de la app, que no genere el campo de descripción.
						_startat = 1
						if tolower _documentation[1][1] == tolower "Desc" do 
						(
							_nextLine = "====== Descripcion ======\n"
							format _nextLine to:_codeFile
							format _nextLine to:_infoFile
							_nextLine = _documentation[1][2][1] + "\n"
							format _nextLine to:_codeFile
							format "Comentar todo lo que haya que comentar aqui" to:_infoFile
							_startat = 2 
						)

						for i = _startat to _documentation.count do 
						(
							--Si encontramos un struct o un rollout empieza la fiesta
							if (tolower _documentation[i][1] == tolower "Struct") or (tolower _documentation[i][1] == tolower "Rollout") or (tolower _documentation[i][1] == tolower "Attributes")then 
							(
								_nextLine = "====== " + _documentation[i][1] + "  " + _documentation[i][2][1] + " ======\n"
								format _nextLine to:_codeFile
								_nextLine =  _documentation[i][2][2]+"\n"
								format _nextLine to:_codeFile
								
								_printOnceVar = false
								_printOnceFunc = false 
								_printOnceEvents = false
								_manualIterator = i + 1
								_thelastTypeInput = ""
								while _manualIterator<_documentation.count and (tolower _documentation[_manualIterator][1] != tolower "Struct") and (tolower _documentation[_manualIterator][1] != tolower "Rollout") and (tolower _documentation[_manualIterator][1] != tolower "Attributes") do 
								(
									if not _printOnceVar do 
									(
										_nextLine = "===== Local Variables =====\n"
										format _nextLine to:_codeFile
										_printOnceVar = true 

										format ("^ Type       ^ Name        ^ Description          ^\n") to:_codeFile
									)
									while _manualIterator<_documentation.count and (tolower _documentation[_manualIterator][1] == tolower "Var") do 
									(
										if _thelastTypeInput != "struct" do 
										(
											_nextLine = "| //" + _documentation[_manualIterator][2][1] + "// |"
											_nextLine += "**" +_documentation[_manualIterator][2][2] + "**|" +_documentation[_manualIterator][2][3] +"|\n"
											format _nextLine to:_codeFile
										)

										_manualIterator += 1
									)

									if not _printOnceFunc do 
									(
										_nextLine = "===== Functions =====\n"
										format _nextLine to:_codeFile
										_printOnceFunc = true 
									)
									_lastTypeInput = ""
									while _manualIterator<_documentation.count and (tolower _documentation[_manualIterator][1] != tolower "Struct") and (tolower _documentation[_manualIterator][1] != tolower "Rollout") do 
									(
										_printOnceHeader = false 
										_printOnceReturns = false
										_function = ""
										_params = #()
										_returns = ""
										if tolower _documentation[_manualIterator][1] == tolower "Fn" do 
										(
											_returns = _documentation[_manualIterator][2][1]
											_function = _documentation[_manualIterator][2][2]
											_nextLine = "==== " + _documentation[_manualIterator][2][2] + " ====\n"
											format _nextLine to:_codeFile
											_nextLine =  _documentation[_manualIterator][2][3] +"\n"
											format _nextLine to:_codeFile
										)
										if tolower _documentation[_manualIterator][1] == tolower "Usage" do 
										(
											format "==Uso:==\n" to:_codeFile 
											_nextLine = "<code> " + _documentation[_manualIterator][2][1] + " </code>\n"
											format _nextLine to:_codeFile
										)
										if tolower _documentation[_manualIterator][1] == tolower "Deprecated" do 
										(
											_nextLine = "== " + _documentation[_manualIterator][2][1] + " ==\n"
											format _nextLine to:_codeFile
										)
										if tolower _documentation[_manualIterator][1] == tolower "Gets" do 
										(
											if not _printOnceHeader and (tolower _lastTypeInput == tolower "Deprecated" or tolower _lastTypeInput== tolower "Fn" or tolower _lastTypeInput== tolower "Usage") do 
											(
												format "==Parametros:==\n" to:_codeFile 
												format ("^ Type       ^ Parameter        ^ Description          ^\n") to:_codeFile
												_printOnceHeader = true
											)

											_nextLine = "| //" + _documentation[_manualIterator][2][1] + "// |"
											_nextLine += "**" +_documentation[_manualIterator][2][2] + "**|" +_documentation[_manualIterator][2][3] +"|\n"
											format _nextLine to:_codeFile		
										)
										if tolower _documentation[_manualIterator][1] == tolower "returns" do 
										(
											if not _printOnceHeader and (tolower _lastTypeInput == tolower "Deprecated" or tolower _lastTypeInput== tolower "Gets") do 
											(
												format "==Returns:==\n" to:_codeFile 
												format "\n" to:_codeFile
												format ("^ Type       ^ Returns        ^ Description          ^\n") to:_codeFile
												_printOnceReturns = true
											)

											_nextLine = "| //" + _documentation[_manualIterator][2][1] + "// |"
											_nextLine += "**" +_documentation[_manualIterator][2][2] + "**|" +_documentation[_manualIterator][2][3] +"|\n"
											format _nextLine to:_codeFile		
										)
										_lastTypeInput = _documentation[_manualIterator][1]
										_manualIterator += 1
									)
									
									_thelastTypeInput = _documentation[_manualIterator][1]
									_manualIterator+=1
								)

								i = _manualIterator
							)
						)

						close _infoFile
						close _codeFile

						--Ahora hay que copiar los dos ficheros en la ruta que toca, segun el fichero.
						_finalPath = pathToWiki + "InsertFolderHere\\InsertFileNameHere.txt"
						if _filetype != "pmovUI" then 
						(
							if _filetype == "other" then 
							(
								_tmpPath = substituteString _finalPath "InsertFileNameHere" ((filterstring _resourceParts[_resourceParts.count] "_.")[2])
								_tmpPath = substituteString _tmpPath (_fileType + "_" ) ""
								_tmpPathCode = substituteString _finalPath "InsertFileNameHere" ((filterstring _resourceParts[_resourceParts.count] "_.")[2]+"_code")
								_tmpPathCode = substituteString _tmpPathCode (_fileType + "_" ) ""
							)
							else 
							(
								_tmpPath = substituteString _finalPath "InsertFileNameHere" ((filterstring _resourceParts[_resourceParts.count] ".")[1])
								_tmpPath = substituteString _tmpPath (_fileType + "_" ) ""
								_tmpPathCode = substituteString _finalPath "InsertFileNameHere" ((filterstring _resourceParts[_resourceParts.count] ".")[1]+"_code")
								_tmpPathCode = substituteString _tmpPathCode (_fileType + "_" ) ""
							)
						)
						else 
						(
							_tmpPath = substituteString _finalPath "InsertFileNameHere" ("UI"+((filterstring _resourceParts[_resourceParts.count] ".")[1]))
							_tmpPath = substituteString _tmpPath (_fileType + "_" ) ""
							_tmpPathCode = substituteString _finalPath "InsertFileNameHere" ("UI"+((filterstring _resourceParts[_resourceParts.count] ".")[1]+"_code"))
							_tmpPathCode = substituteString _tmpPathCode (_fileType + "_" ) ""
						)

						case _fileType of 
						(
							"lib": 
								(
									_tmpPath = substituteString _tmpPath "InsertFolderHere" "Librerias" 
									_tmpPathCode = substituteString _tmpPathCode "InsertFolderHere" "Librerias" 
								) 
							"pmov": 
								(
									_tmpPath = substituteString _tmpPath "InsertFolderHere" "PassManager" 
									_tmpPathCode = substituteString _tmpPathCode "InsertFolderHere" "PassManager"
								)
							"pmovUI": 
								(
									_tmpPath = substituteString _tmpPath "InsertFolderHere" "PassManager" 
									_tmpPathCode = substituteString _tmpPathCode "InsertFolderHere" "PassManager"
								)
							"rsa": 
								(
									_tmpPath = substituteString _tmpPath "InsertFolderHere" "RigSolution" 
									_tmpPathCode = substituteString _tmpPathCode "InsertFolderHere" "RigSolution"
								)
							"rse": 
								(
									_tmpPath = substituteString _tmpPath "InsertFolderHere" "RigSolution" 
									_tmpPathCode = substituteString _tmpPathCode "InsertFolderHere" "RigSolution"
								)
							"rss": 
								(
									_tmpPath = substituteString _tmpPath "InsertFolderHere" "RigSolution" 
									_tmpPathCode = substituteString _tmpPathCode "InsertFolderHere" "RigSolution"
								)
							"sc": 
								(
									_tmpPath = substituteString _tmpPath "InsertFolderHere" "Scripts" 
									_tmpPathCode = substituteString _tmpPathCode "InsertFolderHere" "Scripts"
								)
							"tl": 
								(
									_tmpPath = substituteString _tmpPath "InsertFolderHere" "Tools" 
									_tmpPathCode = substituteString _tmpPathCode "InsertFolderHere" "Tools"
								)
							"other": 
								(
									_tmpPath = substituteString _tmpPath "InsertFolderHere" "Other" 
									_tmpPathCode = substituteString _tmpPathCode "InsertFolderHere" "Other"
								)
						)
						--print _tmpPath
						--print _tmpPathCode
						copyFile _txtPath _tmpPath
						if doesFileExist _tmpPathCode do deleteFile _tmpPathCode
						copyFile _codeTxtPath _tmpPathCode
					)
					close _f 
				)
			)
		),

		------------------------------------------------
		--@fn: boolean | generateLbToolsFile | Crea el archivo de texto que recopila todas las tools del directorio 
		------------------------------------------------			
		fn generateLbToolsFile  = 
		(
			_libPath = pathToWiki + "start\\Librerias.txt"
			_passManagerPath = pathToWiki + "start\\PassManager.txt"
			_rigSolutionPath = pathToWiki + "start\\RigSolution.txt"
			_scriptsPath = pathToWiki + "start\\Scripts.txt"
			_toolsPath = pathToWiki + "start\\Tools.txt"
			_othersPath = pathToWiki + "start\\Other.txt"

			_libFile = createFile _libPath
			_passManagerFile = createFile _passManagerPath
			_rigSolutionFile = createFile _rigSolutionPath
			_scriptsFile = createFile _scriptsPath
			_toolsFile = createFile _toolsPath
			_othersFile = createFile _othersPath

			_firstLink =  "[[http://toolslb.com/|Ir al directorio superior]]\n\n"
			format _firstLink  to:_libFile
			format _firstLink  to:_passManagerFile
			format _firstLink  to:_rigSolutionFile
			format _firstLink  to:_scriptsFile
			format _firstLink  to:_toolsFile
			format _firstLink  to:_othersFile

			_folder = lb.config.getScriptsPath() 
			_files = getfiles (_folder+"*.ms")
			for _file in _files do 
			(
				_fileParts = FilterString _file "\\"
				_fileName = FilterString _fileParts[_fileParts.count] "_"
				_fileNameExt = (filterString _fileName[_fileName.count] ".")
				if _fileName.count == 2 and _fileNameExt[_fileNameExt.count] == "ms" do 
				(
					case _fileName[1] of 
					(
						"lib": 
							(
								format ("	- [[Librerias:" + _fileNameExt[1] + "]]\n")  to:_libFile
							) 
						"pmov": 
							(
								format("	- [[PassManager:" + _fileNameExt[1] + "]]\n") to:_passManagerFile
							)
						"pmovUI": 
							(
								format ("	- [[PassManager:UI" + _fileNameExt[1] + "]]\n") to:_passManagerFile
							)
						"rsa": 
							(
								format ("	- [[RigSolution:" + _fileNameExt[1] + "]]\n") to:_rigSolutionFile
							)
						"rse": 
							(
								format ("	- [[RigSolution:" + _fileNameExt[1] + "]]\n") to:_rigSolutionFile
							)
						"rss": 
							(
								format ("	- [[RigSolution:" + _fileNameExt[1] + "]]\n") to:_rigSolutionFile
							)
						"sc": 
							(
								format ("	- [[Scripts:" + _fileNameExt[1] + "]]\n") to:_scriptsFile
							)
						"tl": 
							(
								format ("	- [[Tools:" + _fileNameExt[1] + "]]\n") to:_toolsFile
							)
						default: 
							(
								format ("	- [[Other:" + _fileNameExt[1] + "]]\n") to:_othersFile
							)
					)
				)
			)
			close _libFile 
			close _passManagerFile 
			close _rigSolutionFile 
			close _scriptsFile 
			close _toolsFile 
			close _othersFile 
		),	
		------------------------------------------------
		--GETS
		------------------------------------------------
		
		------------------------------------------------
		--SETS
		------------------------------------------------
		
		------------------------------------------------
		--OTHER
		------------------------------------------------
		
		------------------------------------------------
		--COMMON
		------------------------------------------------
			
		------------------------------------------------
		--@fn: undefined | initSubLibraries | Inicializa todas las sublibrerías en el orden establecido.
		------------------------------------------------
		fn initSubLibraries =
		(
			_subLibraries = #()
			
			for sl in _subLibraries do sl.init()
		),
		
		------------------------------------------------
		--@fn: undefined | init | Inicializa la librería.
		------------------------------------------------
		fn init =
		(		
			this.initSubLibraries() --inicialza las librerías hijas
		),		
		
		------------------------------------------------------------------------------------------------
		--EVENTS
		------------------------------------------------------------------------------------------------
		
		------------------------------------------------
		--@event: create | Ejecución al crearse la instancia del struct.
		------------------------------------------------
		on create do
		(
			lb.addLibrary this --añade la libreria a la principal
		)
		
	)--lib_templateLib
	
	------------------------------------------------------------------------------------------------------------------------------------------------
	--EXECUTION
	------------------------------------------------------------------------------------------------------------------------------------------------
	
	lib_documentation() --crea la libreria
)