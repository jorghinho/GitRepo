------------------------------------------------------------------------------------------------------------------------------------------------
--Descripcion: Herramienta Plantilla.
------------------------------------------------------------------------------------------------------------------------------------------------
(
	------------------------------------------------------------------------------------------------------------------------------------------------
	--@rollout: setVariationPublishDef | Contiene la herramienta plantilla.
	------------------------------------------------------------------------------------------------------------------------------------------------
	rollout setVariationPublishDef "Set Variation Publish"
	(
		------------------------------------------------------------------------------------------------
		--COMMON
		------------------------------------------------------------------------------------------------
		
		local parent = lb.getTool (lb.getFileToolName (getThisScriptFilename() as string)) --@var : parent | Herramienta o rolllout del que depende y/o contiene el rollout actual		
		
		local minRollWidth = 220	--@var: minRollWidth | Minimun tool width.
		local minRollHeight = 150	--@var: minRollHeight | Minimun tool height.

		------------------------------------------------------------------------------------------------
		--VARIABLES
		------------------------------------------------------------------------------------------------
		
		------------------------------------------------------------------------------------------------
		--CONTROLS
		------------------------------------------------------------------------------------------------
		
		button btnLoadSet "Load Set" pos:[5,10] width:62 height:20 highlightColor:(color 255 195 0) checked:false enabled:true tooltip:"Load set" 
		button btnPublish "Publish" pos:[72,10] width:62 height:20 highlightColor:(color 255 195 0) checked:false enabled:true tooltip:"Publish" 
		button btnLoadVariations "Load Var." pos:[139,10] width:62 height:20 highlightColor:(color 255 195 0) checked:false enabled:true tooltip:"Load variations" 
		
		------------------------------------------------------------------------------------------------
		--FUNCTIONS
		------------------------------------------------------------------------------------------------
		
		------------------------------------------------
		--GETS
		------------------------------------------------
		
		------------------------------------------------
		--SETS
		------------------------------------------------
		
		------------------------------------------------
		--OTHER
		------------------------------------------------
		
		------------------------------------------------
		--@fn: undefined | createSceneEvents | Crea los callbacks relacionados con el rollout
		------------------------------------------------
		fn createSceneEvents =
		(
		
		)
		
		------------------------------------------------
		--@fn: undefined | removeSceneEvents | Destruye los callbacks relacionados con el rollout
		------------------------------------------------
		fn removeSceneEvents =
		(
		
		)
		
		------------------------------------------------
		--COMMON
		------------------------------------------------
		
		------------------------------------------------
		--@fn: undefined | resize | Redimensiona el UI.
		--@gets: point2 | size | Tamaño nuevo del rollout
		------------------------------------------------
		fn resize size =
		(
			------------------------------------------------------------------------------
			--si la herramienta se redimensiona más pequeña que el mínimo, lo limita al minimo
			if size.x < minRollWidth then (size.x = minRollWidth; setVariationPublishDef.width = size.x)
			if size.y < minRollHeight then (size.y = minRollHeight; setVariationPublishDef.height = size.y)
			------------------------------------------------------------------------------
			
			--calcula el incremento en ancho y alto, respecto al mínimo.
			_increment = [size.x - minRollWidth, size.y - minRollHeight]
			
			------------------------------------------------------------------------------
			--redimension en horizontal
			if _increment.x != 0 then --si hay incremento
			(
				btnLoadSet.pos.x = 5 + _increment.x/2
				btnPublish.pos.x = 72 + _increment.x/2
				btnLoadVariations.pos.x = 139 + _increment.x/2
			)--if
			------------------------------------------------------------------------------
			
			------------------------------------------------------------------------------
			--redimension en vertical
			if _increment.y != 0 then --si hay incremento
			(
				
			)--if
			------------------------------------------------------------------------------
		)

		------------------------------------------------
		--@fn: undefined | saveSettings | Salva los settings de la herramienta en el documento de configuración de la misma.
		------------------------------------------------
		fn saveSettings =
		(
			--lb.xml.setAttribute parent.cfgFile ("rollExample1/cateagory") "paramName" "paramValue"
		)
		
		------------------------------------------------
		--@fn: undefined | loadSettings | Carga los settings de la herramienta en el documento de configuración de la misma.
		------------------------------------------------
		fn loadSettings =
		(
			--_param = (lb.xml.getAttribute parent.cfgFile ("rollExample1/category") "paramName") as <value type>
		)
		
		------------------------------------------------------------------------------------------------
		--EVENTS
		------------------------------------------------------------------------------------------------
		
		------------------------------------------------
		--COMMON
		------------------------------------------------

		------------------------------------------------
		--@event: pressed | Evento que se lanza al apretar el boton btnLoadSet.
		------------------------------------------------
		on btnLoadSet pressed do
		(
			if parent.selectedTabIndex == 1 then parent.loadSet type:"mesh"
			else if parent.selectedTabIndex == 2 then parent.loadSet type:"draft"
		)

		------------------------------------------------
		--@event: pressed | Evento que se lanza al apretar el boton btnPublish.
		------------------------------------------------
		on btnPublish pressed do 
		(
			if parent.selectedTabIndex == 1 then parent.publishVariations type:"mesh"
			else if parent.selectedTabIndex == 2 then parent.publishVariations type:"draft"			
		)

		------------------------------------------------
		--@event: pressed | Evento que se lanza al apretar el boton btnLoadVariations.
		------------------------------------------------
		on btnLoadVariations pressed do 
		(
			parent.loadVariations()
		)

		------------------------------------------------
		--@event: resized | Evento que se lanza al redimensionar el rollout.
		--@control: rollout | rollMain | El elemento que sufre la redimensión. El rollout principal de la herramienta.
		--@gets: point2 | size | tamaño al que se ha redimensionado el rollout
		------------------------------------------------
		on setVariationPublishDef resized size do
		(
			resize size
		)
		
		------------------------------------------------
		--@event: open | Evento que se lanza al abrir el rollout.
		--@control: rollout | rollMain | El elemento que se abre. El rollout principal de la herramienta.
		------------------------------------------------
		on setVariationPublishDef open do
		(
			loadSettings()
			createSceneEvents() --crea los callbacks
			if parent.rollMain != undefined then resize [parent.rollMain.width, parent.rollMain.height]
		)
		
		------------------------------------------------
		--@event: close | Evento que se lanza al cerrar el rollout.
		--@control: rollout | rollMain | El elemento que se cierra. El rollout principal de la herramienta.
		------------------------------------------------
		on setVariationPublishDef close do
		(
			removeSceneEvents() --elimina los callbacks
			saveSettings()
		)
	)--setVariationPublishDef
	
	------------------------------------------------------------------------------------------------------------------------------------------------
	--@rollout: cheatSetObjectDef | Contiene la herramienta plantilla.
	------------------------------------------------------------------------------------------------------------------------------------------------
	rollout cheatSetObjectDef "Cheat Set Objects"
	(
		------------------------------------------------------------------------------------------------
		--COMMON
		------------------------------------------------------------------------------------------------
		
		local parent = lb.getTool (lb.getFileToolName (getThisScriptFilename() as string)) --@var : parent | Herramienta o rolllout del que depende y/o contiene el rollout actual	
		local minRollWidth = 220	--@var: minRollWidth | Minimun tool width.
		local minRollHeight = 175	--@var: minRollHeight | Minimun tool height.

		------------------------------------------------------------------------------------------------
		--VARIABLES
		------------------------------------------------------------------------------------------------
		
		------------------------------------------------------------------------------------------------
		--CONTROLS
		------------------------------------------------------------------------------------------------

		button btnCheatNow "Cheat with XForm now" pos:[5,10] width:195 height:20 tooltip:"Cheat with XForm now" 
		button btnCheatMorphsNow "Cheat with EditPoly now" pos:[5,35] width:195 height:20 tooltip:"Cheat with morph now" 

		button btnDisableCheats "Disable Cheats" pos:[5,60] width:95 height:20 tooltip:"Disable Cheats" 
		button btnEnableCheats "Enable Cheats" pos:[105,60] width:95 height:20 tooltip:"Enable Cheats" 
		
		------------------------------------------------------------------------------------------------
		--FUNCTIONS
		------------------------------------------------------------------------------------------------
		
		------------------------------------------------
		--GETS
		------------------------------------------------
		
		------------------------------------------------
		--SETS
		------------------------------------------------
		
		------------------------------------------------
		--OTHER
		------------------------------------------------
		
		------------------------------------------------
		--@fn: undefined | createSceneEvents | Crea los callbacks relacionados con el rollout
		------------------------------------------------
		fn createSceneEvents =
		(
		
		)
		
		------------------------------------------------
		--@fn: undefined | removeSceneEvents | Destruye los callbacks relacionados con el rollout
		------------------------------------------------
		fn removeSceneEvents =
		(
		
		)
		
		------------------------------------------------
		--COMMON
		------------------------------------------------
		
		------------------------------------------------
		--@fn: undefined | resize | Redimensiona el UI.
		--@gets: point2 | size | Tamaño nuevo del rollout
		------------------------------------------------
		fn resize size =
		(
			------------------------------------------------------------------------------
			--si la herramienta se redimensiona más pequeña que el mínimo, lo limita al minimo
			if size.x < minRollWidth then (size.x = minRollWidth; cheatSetObjectDef.width = size.x)
			if size.y < minRollHeight then (size.y = minRollHeight; cheatSetObjectDef.height = size.y)
			------------------------------------------------------------------------------
			
			--calcula el incremento en ancho y alto, respecto al mínimo.
			_increment = [size.x - minRollWidth, size.y - minRollHeight]
			
			------------------------------------------------------------------------------
			--redimension en horizontal
			if _increment.x != 0 then --si hay incremento
			(
				btnCheatNow.pos.x = 5 + _increment.x/2
				btnCheatMorphsNow.pos.x = 5 + _increment.x/2
				btnDisableCheats.pos.x = 5 + _increment.x/2
				btnEnableCheats.pos.x = 105 + _increment.x/2
			)--if
			------------------------------------------------------------------------------
			
			------------------------------------------------------------------------------
			--redimension en vertical
			if _increment.y != 0 then --si hay incremento
			(
				
			)--if
			------------------------------------------------------------------------------
		)

		------------------------------------------------
		--@fn: undefined | saveSettings | Salva los settings de la herramienta en el documento de configuración de la misma.
		------------------------------------------------
		fn saveSettings =
		(
			--lb.xml.setAttribute parent.cfgFile ("rollExample1/cateagory") "paramName" "paramValue"
		)
		
		------------------------------------------------
		--@fn: undefined | loadSettings | Carga los settings de la herramienta en el documento de configuración de la misma.
		------------------------------------------------
		fn loadSettings =
		(
			--_param = (lb.xml.getAttribute parent.cfgFile ("rollExample1/category") "paramName") as <value type>
		)
		
		------------------------------------------------------------------------------------------------
		--EVENTS
		------------------------------------------------------------------------------------------------
		
		------------------------------------------------
		--COMMON
		------------------------------------------------

		------------------------------------------------
		--@event: pressed | Llama a la funcion cheatNow del struct.
		------------------------------------------------
		on btnCheatNow pressed do 
		(
			parent.cheatNow()
		)

		------------------------------------------------
		--@event: pressed | Llama a la funcion cheatMorphsNow del struct.
		------------------------------------------------
		on btnCheatMorphsNow pressed do 
		(
			parent.cheatMorphsNow()
		)

		------------------------------------------------

		------------------------------------------------
		--desactiva los cheats seleccionados
		------------------------------------------------
		on btnDisableCheats pressed do
		(
			parent.setCheatsState false
		)

		------------------------------------------------
		--activa los cheats seleccionados
		------------------------------------------------
		on btnEnableCheats pressed do
		(
			parent.setCheatsState true
		)

		------------------------------------------------
		--@event: resized | Evento que se lanza al redimensionar el rollout.
		--@control: rollout | rollMain | El elemento que sufre la redimensión. El rollout principal de la herramienta.
		--@gets: point2 | size | tamaño al que se ha redimensionado el rollout
		------------------------------------------------
		on cheatSetObjectDef resized size do
		(
			resize size
		)
		
		------------------------------------------------
		--@event: open | Evento que se lanza al abrir el rollout.
		--@control: rollout | rollMain | El elemento que se abre. El rollout principal de la herramienta.
		------------------------------------------------
		on cheatSetObjectDef open do
		(
			loadSettings()
			createSceneEvents() --crea los callbacks
			if parent.rollMain != undefined then resize [parent.rollMain.width, parent.rollMain.height]
		)
		
		------------------------------------------------
		--@event: close | Evento que se lanza al cerrar el rollout.
		--@control: rollout | rollMain | El elemento que se cierra. El rollout principal de la herramienta.
		------------------------------------------------
		on cheatSetObjectDef close do
		(
			removeSceneEvents() --elimina los callbacks
			saveSettings()
		)
	)--cheatSetObjectDef

	------------------------------------------------------------------------------------------------------------------------------------------------
	--@rollout: rollMainDef | Contiene el listado de overrides permitidos.
	------------------------------------------------------------------------------------------------------------------------------------------------
	rollout rollMainDef "Set Camera Variation Manager"
	(
		------------------------------------------------------------------------------------------------
		--COMMON
		------------------------------------------------------------------------------------------------
		
		local parent = lb.getTool (lb.getFileToolName (getThisScriptFilename() as string)) --@var : parent | Herramienta o rolllout del que depende y/o contiene el rollout actual
		
		local minRollWidth = 220	--@var: minRollWidth | Minimun tool width.
		local minRollHeight = 200	--@var: minRollHeight | Minimun tool height.

		------------------------------------------------------------------------------------------------
		--VARIABLES
		------------------------------------------------------------------------------------------------
		
		local opening = false --@var: opening | Flag para que no salte el evento de cambio de tab y no pise el valor cargado del archivo .cfg
		
		------------------------------------------------------------------------------------------------
		--CONTROLS
		------------------------------------------------------------------------------------------------
		
		dotNetControl tbTabs "DevExpress.XtraTab.XtraTabControl" pos:[0,5] width:220 height:21 --25
	
		------------------------------------------------------------------------------------------------
		--SUBROLLOUTS
		------------------------------------------------------------------------------------------------

		subrollout subRollContainer "subRollouts" pos:[0,26] width:minRollWidth height:574 --@control | subRollContainer | SubRollouts container.

		------------------------------------------------------------------------------------------------
		--FUNCTIONS
		------------------------------------------------------------------------------------------------
		
		------------------------------------------------
		--GETS
		------------------------------------------------
		
		------------------------------------------------
		--SETS
		------------------------------------------------
		
		------------------------------------------------
		--OTHER
		------------------------------------------------
		
		------------------------------------------------
		--@fn: undefined | initUI | Inicializa los controles del UI.
		------------------------------------------------
		fn initUI =
		(	
			tbTabs.paintstylename = "PropertyView"
			tbTabs.borderStyle = (dotnetclass "DevExpress.XtraEditors.Controls.BorderStyles").noBorder
			tbTabs.TabPageWidth = 100			
			
			tbTabs.Appearance.BackColor = (dotnetclass "system.drawing.color").fromArgb 68 68 68
			tbTabs.Appearance.BackColor2 = (dotnetclass "system.drawing.color").fromArgb 68 68 68
			tbTabs.Appearance.BorderColor = (dotnetclass "system.drawing.color").fromArgb 100 100 100
		)

		------------------------------------------------
		--COMMON
		------------------------------------------------
		
		------------------------------------------------
		--@fn: undefined | loadSettings | Carga los settings de la herramienta en el documento de configuración de la misma.
		------------------------------------------------
		fn loadSettings =
		(
			_width = (lb.xml.getAttribute parent.cfgFile ("rollMain/size") "width") as integer
			_height = (lb.xml.getAttribute parent.cfgFile ("rollMain/size") "height") as integer
				
			--posicion
			_posX = (lb.xml.getAttribute parent.cfgFile ("rollMain/pos") "x") as integer
			_posY = (lb.xml.getAttribute parent.cfgFile ("rollMain/pos") "y") as integer
				
			--establece minimos
			if _width < minRollWidth then _width = minRollWidth
			if _height < minRollHeight then _height = minRollHeight
			if _posX < 0 then _posX = 0
			if _posY < 0 then _posY = 0
				
			--aplica los valores
			rollMainDef.width = _width
			rollMainDef.height = _height
			setDialogPos rollMainDef [_posX,_posY]

			--aplica el tab seleccionado
			parent.selectedTabIndex = (lb.xml.getAttribute parent.cfgFile "rollMain/options" "selectedTabIndex") as integer
			if parent.selectedTabIndex == 0 then parent.selectedTabIndex = 1
		)
		
		------------------------------------------------
		--@fn: undefined | saveSettings | Salva los settings de la herramienta en el documento de configuración de la misma.
		------------------------------------------------
		fn saveSettings =
		(
			--almacena posicion
			lb.xml.setAttribute parent.cfgFile ("rollMain/pos") "x" (((getDialogPos rollMainDef).x) as string)
			lb.xml.setAttribute parent.cfgFile ("rollMain/pos") "y" (((getDialogPos rollMainDef).y) as string)
			
			--almacena tamaño
			lb.xml.setAttribute parent.cfgFile ("rollMain/size") "width" (rollMainDef.width as string)
			lb.xml.setAttribute parent.cfgFile ("rollMain/size") "height" (rollMainDef.height as string)

			--almacena las opciones de UI
			lb.xml.setAttribute parent.cfgFile ("rollMain/options") "selectedTabIndex" (parent.selectedTabIndex as string)
		)

		------------------------------------------------
		--@fn: undefined | createSceneEvents | Crea los callbacks de este rollout.
		------------------------------------------------
		fn createSceneEvents =
		(
			--sin operaciones
		)
		
		------------------------------------------------
		--@fn: undefined | removeSceneEvents | Elimina los callbacks de este rollout.
		------------------------------------------------
		fn removeSceneEvents =
		(
			--sin operaciones
		)

		------------------------------------------------
		--@fn: undefined | resize | Redimensiona el UI.
		--@gets: point2 | size | Tamaño nuevo del rollout
		------------------------------------------------
		fn resize size forced:false =
		(
			------------------------------------------------------------------------------
			--si el tamaño es menor que el minimo
			if size.x < minRollWidth then (size.x = minRollWidth; rollMainDef.width = size.x)
			if size.y < minRollHeight then (size.y = minRollHeight; rollMainDef.height = size.y)
			------------------------------------------------------------------------------
			
			--calcula el incremento de tamaño
			_increment = [size.x - minRollWidth, size.y - minRollHeight]

			------------------------------------------------------------------------------
			--redimension en horizonal
			if _increment.x != 0 or forced then --si hay incremento
			(				
				tbTabs.width = minRollWidth + _increment.x
				if tbTabs.tabPages.count != 0 then tbTabs.TabPageWidth = (minRollWidth + _increment.x)/(tbTabs.tabPages.count) - 20
				if tbTabs.tabPages.count == 1 then tbTabs.TabPageWidth = tbTabs.TabPageWidth - 10
				
				subRollContainer.width = size.x
			)--if
			------------------------------------------------------------------------------

			------------------------------------------------------------------------------
			--redimension en vertical
			if _increment.y != 0 then --si hay incremento
			(
				--zona de subRollouts
				subRollContainer.height = 574 + _increment.y				
			)--if
			------------------------------------------------------------------------------

			parent.addTabRollouts()
		)
		
		------------------------------------------------------------------------------------------------
		--EVENTS
		------------------------------------------------------------------------------------------------
		
		------------------------------------------------
		--@event: selectedPageChanged | Evento que se lanza al cambiar de tab.
		--@control: DevExpress.XtraTab.XtraTabControl | tbTabs | Tabs.
		--@gets: event | events | Objeto devuelto por el evento.
		------------------------------------------------
		on tbTabs selectedPageChanged events do
		(
			if not opening then
			(
				parent.selectedTabIndex = tbTabs.selectedTabPageIndex + 1
				parent.addTabRollouts()
			)--if
		)
		
		------------------------------------------------
		--COMMON
		------------------------------------------------
		
		------------------------------------------------
		--@event: resized | Evento que se lanza al redimensionar el rollout.
		--@control: rollout | rollMainDef | El elemento que sufre la redimensión. El rollout principal de la herramienta.
		--@gets: point2 | size | tamaño al que se ha redimensionado el rollout
		------------------------------------------------
		on rollMainDef resized size do
		(
			resize size
		)
		
		------------------------------------------------
		--@event: open | Evento que se lanza al abrir el rollout.
		--@control: rollout | rollMainDef | El elemento que se abre. El rollout principal de la herramienta.
		------------------------------------------------
		on rollMainDef open do
		(
			opening = true --flag para que no salte el evento de cambio de tab y no pise el valor cargado del archivo .cfg

			initUI() --inicializa el UI
			loadSettings()
			parent.fillTabsRolloutsDefs()
			parent.addTabs()
			createSceneEvents()		
			if parent.rollMain != undefined then resize [parent.rollMain.width, parent.rollMain.height] forced:true
			
			opening = false --flag para que no salte el evento de cambio de tab y no pise el valor cargado del archivo .cfg
		)
		
		------------------------------------------------
		--@event: close | Evento que se lanza al cerrar el rollout.
		--@control: rollout | rollMainDef | El elemento que se cierra. El rollout principal de la herramienta.
		------------------------------------------------
		on rollMainDef close do
		(				
			removeSceneEvents()
			saveSettings()

			parent.opened = false
			updateToolbarButtons()		
		)	
	)--rollMainDef

	------------------------------------------------------------------------------------------------------------------------------------------------
	--@struct: templateTabTool | Contiene la herramienta plantilla.
	------------------------------------------------------------------------------------------------------------------------------------------------
	struct tl_setCameraVariationManager
	(
		------------------------------------------------------------------------------------------------
		--COMMON
		------------------------------------------------------------------------------------------------
		
		def = (classof this),				--@var: def | Almacena la definicion del struct.
		defFile = getThisScriptFilename(),	--@var: defFile | Almacena la ruta del propio archivo de script que contiene la definicion.
		
		category = #main,					--@var: category | Categoria de la tool.
		className = lb.getFileToolName (getThisScriptFilename() as string),	--@var: className | Nombre de la tool.
		description = "Set Camera Variation Manager",		--@var: description | Descripcion de la tool.
		
		cfgFile = (lb.config.getToolsIniPath()) + (lb.getFileToolName (getThisScriptFilename() as string)) + ".cfg",	--@var: cfgFile | Archivo de configuracion de la tool.
			
		opened = false,			--@var: opened | Indica si la herramienta está abierta.

		minWidth = 220,		--@var: minWidth | Ancho mínimo de la herramienta.
		minHeight = 445,		--@var: minHeight | Alto mínimo de la herramienta.

		------------------------------------------------------------------------------------------------
		--VARIABLES
		------------------------------------------------------------------------------------------------
		
		tabForeColor = (dotnetclass "system.drawing.color").fromArgb 189 189 189,
		tabBorderColor = (dotnetclass "system.drawing.color").fromArgb 30 30 30,
		tabBackColor = (dotnetclass "system.drawing.color").fromArgb 60 60 60,
		tabBackColorActive = (dotnetclass "system.drawing.color").fromArgb 90 90 90,
		tabBackColor2 = (dotnetclass "system.drawing.color").fromArgb 55 55 55,
		tabBackColorActive2 = (dotnetclass "system.drawing.color").fromArgb 60 60 60,		

		------------------------------------------------------------------------------------------------
		--LIBRARIES
		------------------------------------------------------------------------------------------------
		
		------------------------------------------------------------------------------------------------
		--ROLLOUTS
		------------------------------------------------------------------------------------------------

		setVariationPublish = setVariationPublishDef,
		cheatSetObject = cheatSetObjectDef,
		
		rollMain = rollMainDef,	--@var: rollMain | Main tool rollout.
		
		subRolloutsContainer = this.rollMain.subRollContainer, --@var: subRolloutsContainer | contenedor de subrollouts.

		--estos arrays se rellenan en la funcion fillTabsRolloutsDefs, que se llama al abrir la herramienta.
		--esto es solo la defincion de las variables y una ejemplo de estructura que luego se sobrescribe.
		tabNames = #(""), --@var: tambNames | Nombres de los tabs.
		tabRollouts = #(#(undefined)), --@var: mentalrayTabNames | Rollots de cada tab.
		tabRolloutsRolledUp = #(#(true, true)), --@var: tabRolloutsRolledUp | Estado de desplegado/plegado de cada rollout de cada tab.

		selectedTabIndex = 1, --@var: selectedTabIndex | Tab seleccionado. Para usar al abrir y cerrar la herramienta

		------------------------------------------------------------------------------------------------
		--FUNCTIONS
		------------------------------------------------------------------------------------------------
			
		------------------------------------------------
		--GETS
		------------------------------------------------
		
		------------------------------------------------
		--SETS
		------------------------------------------------
		
		------------------------------------------------
		--OTHER
		------------------------------------------------

		--set_kidsPark{std-std.s140a-c010}_mesh_v01.max
		--set_kidsPark{std-std.s140a-c010-replacement}_mesh_v01.max

		------------------------------------------------
		--@fn: undefined | loadSet | Funcion para (re)cargar el set.
		------------------------------------------------			
		fn loadSet type:"mesh" =
		(

			if lb.message.show "All sets will be deleted. Continue?" type:#query do
			(
				--leemos los sets ya cargados
				_loadedSets = lb.asset.getSceneAssets type:lb.nc.NC_setPrefix 

				--los borramos
				for _set in _loadedSets do
					lb.asset.deleteAsset _set

				_mustLoadSets = #()
				--buscamos su última versión de alta y la cargamos
				for _set in _loadedSets do
				(
					_files = getFiles (_set.folder + "version\\preset\\set_"+_set.namePrefix + "?" + _set.preset + "?_" + type + "_v??.prt")
					_foundSet = undefined
					_foundVersion = 0
					for _file in _files do
					(
						_fileversion = (substring _file (_file.count-5) 2) as integer
						if _fileversion > _foundVersion do
						(
							_foundVersion = _fileversion
							_foundSet = _file
						)
					)

					if _foundSet != undefined do
						append _mustLoadSets _foundSet
				)

				-- Si no hemos encontrado ninguno (o no había ninguno cargado), pedimos uno al usuario
				if _mustLoadSets.count == 0 do
				(
					f = getOpenFileName caption:"Load set" types:"Preset file(*.prt)"
					if f != undefined do
						append _mustLoadSets f
				)

				--Cargamos los sets correspondientes
				iLastObject = objects.count
				for _mustLoad in _mustLoadSets do
					lb.presets.load _mustLoad 

				--desfreezeamos todos los objetos cargados
				for i=iLastObject to objects.count do
					unfreeze objects[i]
				
			)
		),
		
		------------------------------------------------
		--@fn: undefined | publishVariations | Funcion para publicar las variaciones.
		------------------------------------------------			
		fn publishVariations type:"mesh" =
		(
			setWaitCursor()

			--leemos los sets cargados
			_loadedSets = lb.asset.getSceneAssets type:lb.nc.NC_setPrefix 

			--borramos los assets 
			for _asset in (lb.asset.getSceneAssets()) where _asset.type != lb.nc.NC_setPrefix do
					lb.asset.deleteAsset _asset

			_objectsInScene = objects as array
			_fileNameStrips = (filterString maxfilename "_")
			_cheatName = "s" + (filterString _fileNameStrips[2] "-")[1] + "-" + "c" + substring _fileNameStrips[3] 4 -1

			--deberemos consultar si se trata de un set replacement o un set variation.
			_hasXformOrEditPolyMod = false
			_replacementProcess = false
			for _obj in _objectsInScene do 
			(
				for _mod in _obj.modifiers do
				(
					if ((classOf _mod == XForm) or (classOf _mod == Edit_Poly)) and _mod.name == _cheatName then
					(
						_hasXformOrEditPolyMod = true
					)
				)
			)
			if _hasXformOrEditPolyMod then 
			(
				--borramos, de los objetos restantes, los que no tengan un XForm creado con "cheat now"
				for o=_objectsInScene.count to 1 by -1 do
				(
					_isCheated = false
					for i=0 to _objectsInScene[o][4].numsubs where _isCheated == false do
						if _objectsInScene[o][4][i] != undefined do
						(
							_class = classof _objectsInScene[o][4][i].value
							if findItem #(xForm, Edit_Poly) _class != 0 and _objectsInScene[o][4][i].value.name == _cheatName do
							(
								_isCheated = true
								if _class == Edit_Poly do
									this.convertEditPolyToMorph _objectsInScene[o] _objectsInScene[o][4][i].value
							)
						)
								
					if not _isCheated and not isdeleted _objectsInScene[o] do
						delete _objectsInScene[o]
				)		
			)
			else
			(
				for i=cameras.count to 1 by -1 do delete cameras[i]
				_replacementProcess = lb.message.show "No Xform or Edit poly modifiers found. Do you want to save as a set replacement?" type:#query
			)

			--salvamos
			if _hasXformOrEditPolyMod or _replacementProcess do 
			(
				_folderPath = maxfilepath + "..\\asset"
				if not doesFileExist _folderPath do
					makeDir _folderPath
				for _set in _loadedSets do
				(
					_setVersion = _set.version as string
					if _setVersion.count < 2 do
						_setVersion = "0" + _setVersion

					if _hasXformOrEditPolyMod then 
					(
						_fileName = "set_" + (substring _set.name 1 (_set.name.count-1)) + "." + _cheatName + (substring _set.name _set.name.count -1) + "_"+ type +"_v" + _setVersion + ".max"
					)
					else
					(
						if _replacementProcess do _fileName = "set_" + (substring _set.name 1 (_set.name.count-1)) + "." + _cheatName +"-replacement" + (substring _set.name _set.name.count -1) + "_"+ type +"_v" + _setVersion + ".max"
					)
					_savePath = _folderPath + "\\" + _fileName

					saveMaxFile _savePath quiet:true
				)
				setArrowCursor()
				lb.message.show "Variation saved successfully. You have to reload original file" type:#message
			)

		),

		------------------------------------------------
		--@fn: undefined | loadVariations | Funcion para cargar las variaciones.
		------------------------------------------------			
		fn loadVariations =
		(
			setWaitCursor()
			
			--leemos los sets cargados
			_loadedSets = lb.asset.getSceneAssets type:lb.nc.NC_setPrefix 

			--cargamos en modo mesh
			for _set in _loadedSets do
			(
				setWaitCursor()
				lb.asset.loadAssetCameraVariations _set type:"mesh"
				setArrowCursor()
			)

			setArrowCursor()
		),

		------------------------------------------------
		--@fn: undefined | cheatNow | Funcion para poder modificar las piezas del set.
		------------------------------------------------			
		fn cheatNow =
		(
			this.cheatWithModifierNow xForm
		),

		------------------------------------------------
		--@fn: undefined | cheatNow | Funcion para poder modificar las piezas del set.
		------------------------------------------------			
		fn cheatMorphsNow =
		(
			this.cheatWithModifierNow Edit_Poly
		),

		------------------------------------------------
		--@fn: undefined | cheatNow | Funcion para poder modificar las piezas del set.
		------------------------------------------------			
		fn cheatWithModifierNow modifier=
		(
			if maxfilename != "" then
			(
				_currSel = getCurrentSelection() as array
				_setObjects = for o in _currSel where (filterString o.name "_")[1] == lb.NC.NC_setPrefix collect o
				
				if _setObjects.count == 0 then
				(
					lb.message.show "You must select at least one set object." type:#message
				)
				else
				(				
					_viewportCams = #()
					for i=1 to viewport.numViews do
					(
					    _cam = viewport.getCamera index:i
					    if _cam != undefined then append _viewportCams _cam
					)--for

					if _viewportCams.count > 1 then lb.message.show "You must have only one camera viewport." type:#message
					else if _viewportCams.count == 0 then lb.message.show "You must have one camera viewport." type:#message
					else if _viewportCams.count == 1 then
					(
						animationRange = interval _viewportCams[1].recStart _viewportCams[1].recEnd 
						sliderTime = _viewportCams[1].recStart

						at time _viewportCams[1].recStart
						(
							for o in _setObjects do
							( 
								_mod = modifier()
								_mod.name = "s" + (filterString (filterString maxfilename "_")[2] "-")[1] + "-" + "c" + (filterString _viewportCams[1].name "_")[2]
								if o.modifiers[TurboSmooth] != undefined then
									addmodifier o (_mod) before:((findItem o.modifiers o.modifiers[TurboSmooth])+1)
								else
									addmodifier o (_mod)
							)--for
						)

						lb.message.show ("Modifier " + modifier as string + " added to objects.") type:#message
					)--if else if
				)--if
			)
			else
			(
				lb.message.show "File must be saved. You must be in a production sequence file." type:#message
			)
		),

		------------------------------------------------
		--Convierte el edit poly cheateado en un morph que se pueda importar luego
		------------------------------------------------
		fn convertEditPolyToMorph node editPoly =
		(
			_clone = copy node
			collapseStack _clone
			_modifierIndex = findItem node.modifiers editPoly
			_mod = Morpher()
			_mod.name = editPoly.name
			deleteModifier node editPoly
			addmodifier node _mod before:(_modifierIndex+1)
			WM3_MC_SetValue _mod 1 100.0
			WM3_MC_BuildFromNode _mod 1 _clone
			delete _clone
		),


		------------------------------------------------
		--activa o desactiva los cheats de los objetos seleccionados. si no se selecciona ninguno lo hace de todos los objetos que tengan cheats
		------------------------------------------------
		fn setCheatsState state =
		(
			_currSel = getCurrentSelection() as array
			if _currSel.count == 0 then _currSel = objects as array

			for o in _currSel do
			(
				for m in o.modifiers where MatchPattern m.name pattern:lb.nc.NC_CheatModifierPattern do (m.enabled = state; m.enabledInViews = state)
			)		
		),

		------------------------------------------------
		--@fn: undefined | updateTabsColor | Actualiza el color de los tabs.
		------------------------------------------------
		fn updateTabsColor =
		(
			--actualiza los tabs
			for i=1 to this.tabNames.count do
			(
				--configura los colores de los tabs
				this.rollMain.tbTabs.tabPages.item[i-1].Appearance.Header.Font = dotnetobject "system.drawing.font" (dotnetobject "System.Drawing.FontFamily" "Arial") 7
				this.rollMain.tbTabs.tabPages.item[i-1].Appearance.Header.ForeColor = this.tabForeColor
				this.rollMain.tbTabs.tabPages.item[i-1].Appearance.Header.BackColor = this.tabBackColor
				this.rollMain.tbTabs.tabPages.item[i-1].Appearance.Header.BackColor2 = this.tabBackColor2
				this.rollMain.tbTabs.tabPages.item[i-1].Appearance.Header.BorderColor = this.tabBorderColor
				
				this.rollMain.tbTabs.tabPages.item[i-1].Appearance.HeaderActive.Font = dotnetobject "system.drawing.font" (dotnetobject "System.Drawing.FontFamily" "Arial") 8
				this.rollMain.tbTabs.tabPages.item[i-1].Appearance.HeaderActive.ForeColor = this.tabForeColor
				this.rollMain.tbTabs.tabPages.item[i-1].Appearance.HeaderActive.BackColor = this.tabBackColorActive
				this.rollMain.tbTabs.tabPages.item[i-1].Appearance.HeaderActive.BackColor2 = this.tabBackColorActive2
				this.rollMain.tbTabs.tabPages.item[i-1].Appearance.HeaderActive.BorderColor = this.tabBorderColor
			)--for
		),

		------------------------------------------------
		--@fn: undefined | fillTabsRolloutsDefs | Añade los tabs y las definiciones de los rollouts a los arrays correspondientes para que la herremienta sepa donde están.
		------------------------------------------------
		fn fillTabsRolloutsDefs =
		(
			this.tabNames = #("Mesh", "Draft")
			this.tabRollouts = #(#(lb.setCameraVariationManager.cheatSetObject, lb.setCameraVariationManager.setVariationPublish), #(lb.setCameraVariationManager.setVariationPublish))
			this.tabRolloutsRolledUp = #(#(false, false), #(false))
		),

		------------------------------------------------
		--@fn: undefined | addTabs | Añade los tabs.
		------------------------------------------------
		fn addTabs =
		(
			--elimina los tabs actuales
			this.rollMain.tbTabs.tabPages.clear()

			--añade los tabs
			for i=1 to this.tabNames.count do
				this.rollMain.tbTabs.tabPages.add this.tabNames[i] --añade el tab
			
			if this.rollMain.tbTabs.tabPages.count != 0 then this.rollMain.tbTabs.TabPageWidth = (this.rollMain.width)/(this.rollMain.tbTabs.tabPages.count) - 17

			--selecciona el tab que estaba seleccionado la ultima vez que se abrio el override
			if this.rollMain.tbTabs.tabPages.count >= this.selectedTabIndex then
				this.rollMain.tbTabs.SelectedTabPage = this.rollMain.tbTabs.tabPages.item[this.selectedTabIndex - 1]
			
			this.updateTabsColor() --actualiza los colores de los tabs
			
			this.addTabRollouts()			
		),

		------------------------------------------------
		--@fn: undefined | removeAllTabRollouts | Elimina todos los subrollouts actuales
		------------------------------------------------
		fn removeAllTabRollouts =
		(
			--elimina los subRollouts actuales
			while this.subRolloutsContainer.rollouts.count != 0 do RemoveSubRollout this.subRolloutsContainer this.subRolloutsContainer.rollouts[1]
		),

		------------------------------------------------
		--@fn: undefined | addTabRollouts | Añade los rollouts del tab actual.
		------------------------------------------------
		fn addTabRollouts =
		(
			--elimina los subRollouts actuales
			this.removeAllTabRollouts()

			--añade los subRollouts
			for i=1 to this.tabRollouts[this.selectedTabIndex].count where this.tabRollouts[this.selectedTabIndex][i] != undefined do
			(
				AddSubRollout this.subRolloutsContainer this.tabRollouts[this.selectedTabIndex][i] rolledUp:this.tabRolloutsRolledUp[this.selectedTabIndex][i]
				this.tabRollouts[this.selectedTabIndex][i].resize [this.rollMain.width, this.rollMain.height]
			)
		),

		------------------------------------------------
		--COMMON
		------------------------------------------------
		
		------------------------------------------------
		--@fn: boolean | isOpen | Devuelve información true o false, si la herramienta está abierta o cerrada.
		------------------------------------------------
		fn isOpen =
		(
			this.opened
		),
		
		------------------------------------------------
		--@fn: undefined | refreshInterface | Refresca el interface inicial de la herramienta
		------------------------------------------------
		fn refreshInterface =
		(
			--refresca el interface de la herramienta
		),
		
		------------------------------------------------
		--@fn: undefined | createInterface | Crea el interface inicial de la herramienta
		------------------------------------------------
		fn createInterface =
		(
			--crea el interface, lo redimensiona y lo reposiciona
			createDialog this.rollMain lockwidth:false lockheight:false pos:[-10000,0] style:#(#style_toolwindow, #style_titlebar, #style_sysmenu, #style_resizing)
		),
		
		------------------------------------------------
		--@fn: undefined | destroyInterface | Destruye el interface de la herramienta.
		------------------------------------------------
		fn destroyInterface =
		(
			destroyDialog this.rollMain --cierra la herramienta.			
		),--destroyInterface
		
		------------------------------------------------
		--@fn: undefined | run | Lanza la herramienta.
		------------------------------------------------
		fn run =
		(
			this.createInterface() --crea el interface.
			this.opened = true --indica que la herramienta está abierta
		),--execute
		
		------------------------------------------------
		--@fn: undefined | close | Cierra la herramienta.
		------------------------------------------------
		fn close =
		(
			this.destroyInterface() --destruye el interface.
			this.opened = false --indica que la herramienta está cerrada.
		),
		
		------------------------------------------------
		--@fn: undefined | initSubLibraries | Inicializa todas las sublibrerías en el orden establecido.
		------------------------------------------------
		fn initSubLibraries =
		(
			--_subLibraries = #()
			
			--for sl in _subLibraries do sl.init()
		),
		
		------------------------------------------------
		--@fn: undefined | init | Inicializa la librería.
		------------------------------------------------
		fn init =
		(		
			this.initSubLibraries() --inicialza las librerías hijas
		),		
		
		------------------------------------------------------------------------------------------------
		--EVENTS
		------------------------------------------------------------------------------------------------
		
		------------------------------------------------
		--@event: create | Ejecución al crearse la instancia del struct.
		------------------------------------------------
		on create do
		(
			lb.addTool this --añade la tool a la libreria principal	
		)		
		
	)--tl_setCameraVariationManager

	------------------------------------------------------------------------------------------------------------------------------------------------
	--EXECUTION
	------------------------------------------------------------------------------------------------------------------------------------------------	
	
	tl_setCameraVariationManager() --crea la herramienta
)