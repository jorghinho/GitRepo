------------------------------------------------------------------------------------------------------------------------------------------------
--Descripcion: Herramienta para mostrar mensajes.
------------------------------------------------------------------------------------------------------------------------------------------------
(
	------------------------------------------------------------------------------------------------------------------------------------------------
	--@rollout: rollMain | Contiene la herramienta plantilla.
	------------------------------------------------------------------------------------------------------------------------------------------------
	rollout rollMainDef "Message"
	(
		------------------------------------------------------------------------------------------------
		--COMMON
		------------------------------------------------------------------------------------------------
		
		local parent = lb.getTool (lb.getFileToolName (getThisScriptFilename() as string)) --@var : parent | Herramienta o rolllout del que depende y/o contiene el rollout actual
		
		local minRollWidth = 300		--@var: minRollWidth | Ancho mínimo de la herramienta.
		local minRollHeight = 75		--@var: minRollHeight | Alto mínimo de la herramienta.

		local maxRollHeight = 800		--@var: maxRollHeight | Alto maximo de la herramienta.
		
		------------------------------------------------------------------------------------------------
		--VARIABLES
		------------------------------------------------------------------------------------------------
		
		------------------------------------------------------------------------------------------------
		--CONTROLS
		------------------------------------------------------------------------------------------------
		
		dotNetControl edtScrollMessageBox "System.Windows.Forms.RichTextBox" pos:[5,5]  width:290 height:40
		dotNetControl edtAuxFocus "System.Windows.Forms.RichTextBox" pos:[5000,0] width:130 height:20
		edittext edtString "" pos:[70,85] height:17 width:170

		button btnOK "OK" pos:[110,50] width:80 height:20
		button btnYes "Yes" pos:[70,50] width:80 height:20
		button btnNo "No" pos:[155,50] width:80 height:20
		button btnCancel "Cancel" pos:[195,50] width:80 height:20
		
		------------------------------------------------------------------------------------------------
		--FUNCTIONS
		------------------------------------------------------------------------------------------------
		
		------------------------------------------------
		--GETS
		------------------------------------------------
		
		------------------------------------------------
		--SETS
		------------------------------------------------
		
		------------------------------------------------
		--OTHER
		------------------------------------------------
		
		------------------------------------------------
		--@fn: undefined | createSceneEvents | Crea los callbacks relacionados con el rollout
		------------------------------------------------
		fn initUI =
		(
			edtScrollMessageBox.foreColor = (dotNetClass "System.Drawing.Color").fromargb 215 215 215
			edtScrollMessageBox.backColor = (dotNetClass "System.Drawing.Color").fromargb 68 68 68
			edtScrollMessageBox.borderStyle = (dotNetClass "System.Windows.Forms.BorderStyle").none			
			edtScrollMessageBox.readOnly = true

			btnOk.visible = parent.currentType == #message or parent.currentType == #queryString
			btnYes.visible = parent.currentType == #query or parent.currentType == #yesNoCancel 
			btnNo.visible = parent.currentType == #query or parent.currentType == #yesNoCancel
			btnCancel.visible = parent.currentType == #yesNoCancel or parent.currentType == #queryString
			edtString.visible = parent.currentType == #queryString


			setFocus edtAuxFocus
		)

		------------------------------------------------
		--COMMON
		------------------------------------------------
		
		------------------------------------------------
		--@fn: undefined | createSceneEvents | Crea los callbacks relacionados con el rollout
		------------------------------------------------
		fn createSceneEvents =
		(
		
		)
		
		------------------------------------------------
		--@fn: undefined | removeSceneEvents | Destruye los callbacks relacionados con el rollout
		------------------------------------------------
		fn removeSceneEvents =
		(
		
		)
		
		------------------------------------------------
		--@fn: undefined | resize | Redimensiona el UI.
		--@gets: point2 | size | Tamaño nuevo del rollout
		------------------------------------------------
		fn resize size forceResize:false =
		(
			------------------------------------------------------------------------------
			--si la herramienta se redimensiona más pequeña que el mínimo, lo limita al minimo
			if size.x < minRollWidth then (size.x = minRollWidth; rollMainDef.width = size.x)
			if size.y < minRollHeight then (size.y = minRollHeight; rollMainDef.height = size.y)
			if size.y > maxRollHeight then (size.y = maxRollHeight; rollMainDef.height = size.y)
			------------------------------------------------------------------------------
			
			--calcula el incremento en ancho y alto, respecto al mínimo.
			_increment = [size.x - minRollWidth, size.y - minRollHeight]
			
			------------------------------------------------------------------------------
			--redimension en horizontal
			if _increment.x != 0 or forceResize then --si hay incremento
			(
				edtScrollMessageBox.width = 290 + _increment.x
				btnOK.pos.x = 110 + _increment.x/2

				case parent.currentType of
				(
					#queryString:
					(
						btnOk.pos.x = 70 + _increment.x/2
						btnCancel.pos.x = 155 + _increment.x/2
						--edtString.pos.x = 70 + _increment.x/2
						edtString.width = 170 + _increment.x
					)
					#query:
					(
						btnYes.pos.x = 70 + _increment.x/2
						btnNo.pos.x = 155 + _increment.x/2
					)

					#yesNoCancel:
					(
						btnYes.pos.x = 25 + _increment.x/2
						btnNo.pos.x = 110 + _increment.x/2
						btnCancel.pos.x = 195 + _increment.x/2
					)
				)--case
			)--if
			------------------------------------------------------------------------------
			
			------------------------------------------------------------------------------
			--redimension en vertical
			if _increment.y != 0 or forceResize then --si hay incremento
			(
				edtScrollMessageBox.height = 40 + _increment.y
				if parent.currentType == #queryString do edtScrollMessageBox.height -= 20

				edtString.pos.y = 30 + _increment.y
				btnOK.pos.y = 50 + _increment.y
				btnYes.pos.y = 50 + _increment.y
				btnNo.pos.y = 50 + _increment.y
				btnCancel.pos.y = 50 + _increment.y
			)--if
			------------------------------------------------------------------------------
		)

		------------------------------------------------
		--@fn: undefined | saveSettings | Salva los settings de la herramienta en el documento de configuración de la misma.
		------------------------------------------------
		fn saveSettings =
		(
			--almacena posicion
			lb.xml.setAttribute parent.cfgFile ("rollMain/pos") "x" (((getDialogPos rollMainDef).x) as string)
			lb.xml.setAttribute parent.cfgFile ("rollMain/pos") "y" (((getDialogPos rollMainDef).y) as string)
			
			--almacena tamaño
			lb.xml.setAttribute parent.cfgFile ("rollMain/size") "width" (rollMainDef.width as string)
			lb.xml.setAttribute parent.cfgFile ("rollMain/size") "height" (rollMainDef.height as string)
		)
		
		------------------------------------------------
		--@fn: undefined | loadSettings | Carga los settings de la herramienta en el documento de configuración de la misma.
		------------------------------------------------
		fn loadSettings =
		(
			--En este caso no hace falta cargar nada de archivo de configuracion, se le dice al llamar a la herramienta
			/*_width = (lb.xml.getAttribute parent.cfgFile ("rollMain/size") "width") as integer
			_height = (lb.xml.getAttribute parent.cfgFile ("rollMain/size") "height") as integer
				
			--posicion
			_posX = (lb.xml.getAttribute parent.cfgFile ("rollMain/pos") "x") as integer
			_posY = (lb.xml.getAttribute parent.cfgFile ("rollMain/pos") "y") as integer
				
			--establece minimos
			if _width < minRollWidth then _width = minRollWidth
			if _height < minRollHeight then _height = minRollHeight
			if _height > maxRollHeight then _height = maxRollHeight
			if _posX < 0 then _posX = 0
			if _posY < 0 then _posY = 0
				
			--aplica los valores
			rollMainDef.width = _width
			rollMainDef.height = _height
			setDialogPos rollMainDef [_posX,_posY]*/

			--en funcion del tipo de mensaje, la respuesta inicial varía
			case parent.currentType of
			(
				#message: parent.currentAnswer = true
				#query: parent.currentAnswer = false
				#yesNoCancel: parent.currentAnswer = #cancel
				#queryString: parent.currentAnswer = ""
			)--case
		)

		------------------------------------------------
		--@fn: undefined | convertStringToType | comprueba que el input de string tiene el formato del tipo que se va a devolver, y lo devuelve como el tipo especificado
		--@gets: string | content | la string recibida del input.
		--@gets: string | type | una etiqueta con el tipo de conversión especificado.
		------------------------------------------------		
		fn convertStringToType content type = 
		(
			case type of 
			(
				#string: return content
				#integer: 
				(
					return content as integer
				)
				#float: 
				(
					return content as float
				)
				#time: 
				(
					contentParts = FilterString content "f"
					_result = ""
					for part in contentParts do _result+= part
					return _result as time
				)
				default: return content
			)
		)

		------------------------------------------------------------------------------------------------
		--EVENTS
		------------------------------------------------------------------------------------------------
		
		------------------------------------------------
		--OTHER
		------------------------------------------------

		------------------------------------------------
		--@event: pressed | Evento que se lanza al presionar el boton.
		--@control: button | btnOk | Boton de ok que cierra el dialogo.		
		------------------------------------------------
		on btnOK pressed do
		(
			parent.currentAnswer = true

			if parent.currentType == #queryString then
			(
				_theResult = convertStringToType edtString.text parent.answertype
				parent.currentAnswer = _theResult
			)
			else
			(
				parent.currentAnswer = true				
			) 
			parent.close()
		)

		on edtString changed value do 
		(
			if parent.currentType == #queryString then
			(
				_process = true
				_badChar = undefined 
				if parent.answertype != #string do 
				(
					for i=1 to value.count where _process and findItem parent.allowedChars (tolower value[i]) == 0 do 
					(
						_process = false 
						if _process == false do 
						(
							_badChar = value[i]
							value[i] = ""
						)
					)
					if _process == false do 
					(
						edtString.text = value
						messageBox ("<" + _badChar + "> is not a valid char for a " + parent.answertype as string + " and will be deleted")
					)
				)
			)
		)

		on edtString entered value do 
		(
			if parent.currentType == #queryString then
			(
				_theResult = convertStringToType edtString.text parent.answertype
				parent.currentAnswer = _theResult
			)
			else
			(
				parent.currentAnswer = true
			) 

			parent.close()
		)

		------------------------------------------------
		--@event: pressed | Evento que se lanza al presionar el boton.
		--@control: button | btnYes | Boton de ok que cierra el dialogo.		
		------------------------------------------------
		on btnYes pressed do
		(
			case parent.currentType of
			(
				#query: parent.currentAnswer = true
				#yesNoCancel: parent.currentAnswer = #yes
				#queryString: parent.currentAnswer = edtString.text
				default: parent.currentAnswer = true
			)--case

			parent.close()
		)

		------------------------------------------------
		--@event: pressed | Evento que se lanza al presionar el boton.
		--@control: button | btnNo | Boton de ok que cierra el dialogo.		
		------------------------------------------------
		on btnNo pressed do
		(
			case parent.currentType of
			(
				#query: parent.currentAnswer = false
				#yesNoCancel: parent.currentAnswer = #no
				default: parent.currentAnswer = false
			)--case

			parent.close()
		)

		------------------------------------------------
		--@event: pressed | Evento que se lanza al presionar el boton.
		--@control: button | btnCancel | Boton de ok que cierra el dialogo.		
		------------------------------------------------
		on btnCancel pressed do
		(
			parent.currentAnswer = #cancel
			parent.close()
		)

		------------------------------------------------
		--@event: KeyUp | Evento que se lanza al presionar una tecla.
		--@control: System.Windows.Forms.RichTextBox | edtAuxFocus | Control para capturar intro.
		--@gets: event | e | Evento lanzado al presionar una tecla.
		------------------------------------------------
		on edtAuxFocus KeyUp e do
		(
			if edtAuxFocus.Focused do
			(
				key = toLower (e.KeyData.ToString())
				if key == "return" or key == "y" or key == "s" then
				(
					case parent.currentType of
					(
						#query: parent.currentAnswer = true
						#yesNoCancel: parent.currentAnswer = #yes
						default: parent.currentAnswer = true
					)--case
					parent.close()
				)
				else if key == "escape" or key == "n" do
				(
					case parent.currentType of
					(
						#query: parent.currentAnswer = false
						#yesNoCancel: parent.currentAnswer = #no
						default: parent.currentAnswer = false
					)--case
					parent.close()
				)
			)
		)

		------------------------------------------------
		--COMMON
		------------------------------------------------
		
		------------------------------------------------
		--@event: resized | Evento que se lanza al redimensionar el rollout.
		--@control: rollout | rollMain | El elemento que sufre la redimensión. El rollout principal de la herramienta.
		--@gets: point2 | size | tamaño al que se ha redimensionado el rollout
		------------------------------------------------
		on rollMainDef resized size do
		(
			resize size
		)
		
		------------------------------------------------
		--@event: open | Evento que se lanza al abrir el rollout.
		--@control: rollout | rollMain | El elemento que se abre. El rollout principal de la herramienta.
		------------------------------------------------
		on rollMainDef open do
		(
			initUI()
			loadSettings()
			createSceneEvents() --crea los callbacks
			if parent.currentMessage != "" then parent.setMessage parent.currentMessage
			if parent.rollMain != undefined then resize [parent.rollMain.width, parent.rollMain.height] forceResize:true

			if parent.currentType == #queryString do
				setFocus edtString
		)
		
		------------------------------------------------
		--@event: close | Evento que se lanza al cerrar el rollout.
		--@control: rollout | rollMain | El elemento que se cierra. El rollout principal de la herramienta.
		------------------------------------------------
		on rollMainDef close do
		(
			removeSceneEvents() --elimina los callbacks
			saveSettings()
			
			parent.opened = false --indica que la herramienta está cerrada.
			updateToolbarButtons()
		)
	)--rollMainDef
	
	------------------------------------------------------------------------------------------------------------------------------------------------
	--@struct: message | Contiene la herramienta de mensajes.
	------------------------------------------------------------------------------------------------------------------------------------------------
	struct tl_message
	(
		------------------------------------------------------------------------------------------------
		--COMMON
		------------------------------------------------------------------------------------------------
		
		def = (classof this),				--@var: def | Almacena la definicion del struct.
		defFile = getThisScriptFilename(),	--@var: defFile | Almacena la ruta del propio archivo de script que contiene la definicion.
		
		category = #main,					--@var: category | Categoria de la tool.
		className = lb.getFileToolName (getThisScriptFilename() as string),	--@var: className | Nombre de la tool.
		description = "Tool Message",		--@var: description | Descripcion de la tool.
		
		cfgFile = (lb.config.getToolsIniPath()) + (lb.getFileToolName (getThisScriptFilename() as string)) + ".cfg",	--@var: cfgFile | Archivo de configuracion de la tool.
			
		opened = false,			--@var: opened | Indica si la herramienta está abierta.
			
		------------------------------------------------------------------------------------------------
		--VARIABLES
		------------------------------------------------------------------------------------------------
		
		currentMessage = "", --mensaje actual
		currentType = #message,	--tipo de ventana, #message, #query, #yesNoCancel, #queryString
		currentAnswer = false, --respuesta del query o del yesNoCancel
		answertype = undefined, -- el tipo de respuesta que se espera #string,#integer...
		allowedChars = undefined, -- los caracteres que se pueden hacer input segun el tipo.

		------------------------------------------------------------------------------------------------
		--LIBRARIES
		------------------------------------------------------------------------------------------------
		
		------------------------------------------------------------------------------------------------
		--ROLLOUTS
		------------------------------------------------------------------------------------------------
		
		rollMain = rollMainDef,	--@var: rollMain | Almacena el rollout principal de la herramienta.
			
		------------------------------------------------------------------------------------------------
		--FUNCTIONS
		------------------------------------------------------------------------------------------------
			
		------------------------------------------------
		--GETS
		------------------------------------------------
		
		------------------------------------------------
		--SETS
		------------------------------------------------
		
		------------------------------------------------
		--Añade el mensaje apone el mensaje a la ventana
		------------------------------------------------
		fn setMessage messagetext resize:true =
		(
			if resize then
			(
				lineCharLimit = (this.rollMain.edtScrollMessageBox.width/5.5) --numero de caracteres limite por línea
				_nLines = 0 --numero de lineas del mensaje
				_cont = 0
				
				for i=1 to messagetext.count do --contabiliza las lineas que van a salir
				(
					_cont += 1 --incrementa el contador de caracteres de linea
					
					if _cont >= lineCharLimit or messagetext[i] == "\n" then
					(
						_nLines +=1
						_cont = 0
					)--if
				)--for
				
				if _cont != 0 then _nLines += 1 --si no hay lineas se asume que habra una linea pero vacia
				
				_height = this.rollMain.height --altura actual del rollout

				if _nLines < 2 then --si hay un linea nada mas
				(
					this.rollMain.edtScrollMessageBox.selectionAlignment = (dotNetClass "System.Windows.Forms.HorizontalAlignment").center
					_height = 50
				)
				else
				(
					this.rollMain.edtScrollMessageBox.selectionAlignment = (dotNetClass "System.Windows.Forms.HorizontalAlignment").left
					_height = _nLines*13 + 35					
				)--if else

				--establece el nuevo alto
				if this.rollMain.height < _height then
				(
					this.rollMain.height = _height
					this.rollMain.resize [this.rollMain.width, _height]
				)--if
			)--if resize
						
			--cambia el texto
			this.rollMain.edtScrollMessageBox.Clear()
			this.rollMain.edtScrollMessageBox.AppendText messagetext
		),

		fn show messagetext type:#message pos:undefined size:[300,75] modal:true answertype:#string=
		(
			this.run messagetext type:type pos:pos size:size modal:modal answertype:answertype
		),

		------------------------------------------------
		--OTHER
		------------------------------------------------
		
		------------------------------------------------
		--COMMON
		------------------------------------------------
		
		------------------------------------------------
		--@fn: boolean | isOpen | Devuelve información true o false, si la herramienta está abierta o cerrada.
		------------------------------------------------
		fn isOpen =
		(
			this.opened
		),
		
		------------------------------------------------
		--@fn: undefined | refreshInterface | Refresca el interface inicial de la herramienta
		------------------------------------------------
		fn refreshInterface =
		(
			--refresca el interface de la herramienta
		),

		------------------------------------------------
		--@fn: undefined | initAllowedValues | inicializa la variable de inputs correctos segun el tipo de input que se trata.
		------------------------------------------------		
		fn initAllowedValues = 
		(
			if this.currentType == #queryString then
			(
				case this.answerType of 
				(
					#integer:
					(
						this.allowedChars = "1234567890"
					)	
					#float:
					(
						this.allowedChars = "1234567890."
					)
					#time:
					(
						this.allowedChars = "1234567890f"
					)
					default:
					(
						this.allowedChars = ""
					)
				)

				this.allowedChars = for i=1 to this.allowedChars.count collect this.allowedChars[i] --Recolectamos todos los caracteres permitidos en un array.
			)
		),

		------------------------------------------------
		--@fn: undefined | createInterface | Crea el interface inicial de la herramienta
		------------------------------------------------
		fn createInterface messagetext type:#message pos:undefined size:[300,75] modal:true answertype:#string=
		(
			this.currentMessage = messagetext
			this.currentType = type
			this.answertype = answertype

			initAllowedValues()

			--crea el interface, lo redimensiona y lo reposiciona
			if pos != undefined then
				createDialog this.rollMain pos:pos width:size.x height:size.y lockwidth:false lockheight:false modal:modal answertype:answertype style:#(#style_toolwindow, #style_titlebar, #style_sysmenu, #style_resizing)
			else
				createDialog this.rollMain width:size.x height:size.y lockwidth:false lockheight:false modal:modal answertype:answertype style:#(#style_toolwindow, #style_titlebar, #style_sysmenu, #style_resizing)
		),
		
		------------------------------------------------
		--@fn: undefined | destroyInterface | Destruye el interface de la herramienta.
		------------------------------------------------
		fn destroyInterface =
		(
			destroyDialog this.rollMain --cierra la herramienta.
		),--destroyInterface
		
		------------------------------------------------
		--@fn: generic | run | Lanza la herramienta y devuelve el resultado.
		------------------------------------------------
		fn run messagetext type:#message pos:undefined size:[300,75] modal:true answertype:#string =
		(
			--crea el interface.
			this.createInterface messagetext type:type pos:pos size:size modal:modal answertype:answertype
			this.opened = true --indica que la herramienta está abierta
 
			if modal then this.currentAnswer else undefined
		),--execute
		
		------------------------------------------------
		--@fn: undefined | close | Cierra la herramienta.
		------------------------------------------------
		fn close =
		(
			this.destroyInterface() --destruye el interface.
			this.opened = false --indica que la herramienta está cerrada.
		),
		
		------------------------------------------------
		--@fn: undefined | initSubLibraries | Inicializa todas las sublibrerías en el orden establecido.
		------------------------------------------------
		fn initSubLibraries =
		(
			_subLibraries = #()
			
			for sl in _subLibraries do sl.init()
		),
		
		------------------------------------------------
		--@fn: undefined | init | Inicializa la librería.
		------------------------------------------------
		fn init =
		(		
			this.initSubLibraries() --inicialza las librerías hijas
		),		
		
		------------------------------------------------------------------------------------------------
		--EVENTS
		------------------------------------------------------------------------------------------------
		
		------------------------------------------------
		--@event: create | Ejecución al crearse la instancia del struct.
		------------------------------------------------
		on create do
		(
			lb.addTool this --añade la tool a la libreria principal	
		)		
		
	)--tl_message
	
	------------------------------------------------------------------------------------------------------------------------------------------------
	--EXECUTION
	------------------------------------------------------------------------------------------------------------------------------------------------	
	
	tl_message() --crea la herramienta
)