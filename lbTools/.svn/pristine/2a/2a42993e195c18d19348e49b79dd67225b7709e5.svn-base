------------------------------------------------------------------------------------------------------------------------------------------------
--Descripcion: Override de commonParametersOptions
------------------------------------------------------------------------------------------------------------------------------------------------
(	
	------------------------------------------------------------------------------------------------------------------------------------------------
	--@attribute: overridecommonParametersOptionsInfo | Custom attribute para almacenar la informacion del override.
	------------------------------------------------------------------------------------------------------------------------------------------------
	ca_overridecommonParametersOptionsInfo = attributes overridecommonParametersOptionsInfo
	(
		parameters main
		(
			--guarda la descripcion del CA y su version.
			CA_version		type:#float		animatable:false	default:1.0
			CA_description	type:#string	default:"Almacena la informacion de un override de commonParametersOptions."
				
			--informacion específica del override
			type		type:#string	default:"override"	--@var | type | Tipo del custom attribute. Override.
			subType		type:#string	default:"commonParametersOptions" --(lb.overrides.getFileOverrideName (getThisScriptFilename() as string))	--@var | subType| Indica que tipo de override es. En funcion de este subtipo el override tiene unas propiedades u otras.
			
			------------------------------------------------
			--parametros de backup	
				
			------------------------------------------------
				
			------------------------------------------------
			--parametros comunes de backup y apply	
				
			atmospherics				type:#boolean	default:true --@var | atmospherics |
			effects						type:#boolean	default:true --@var | effects | Parámetro effects de render.
			displacement				type:#boolean	default:true --@var | displacement | Parámetro displacement de render.
			videoColorCheck				type:#boolean	default:false --@var | videoColorCheck | Parámetro Video Color Check de render.
			renderToFields				type:#boolean	default:false --@var | renderToFields |  Parámetro Render to Fields de render.
			renderHiddenGeometry		type:#boolean	default:false --@var | renderHiddenGeometry | Parámetro Render Hidden Geometry de render.
			areaLightsShadowsAsPoints	type:#boolean	default:false --@var | areaLightsShadowsAsPoints |  Parámetro Area Lights / Shadows as Points de render.
			force2Sided					type:#boolean	default:true --@var | force2Sided | Parámetro Force 2 Sided de render.
			superBlack					type:#boolean	default:false --@var | superBlack | Parámetro Super Black de render.
			------------------------------------------------
				
			------------------------------------------------
			--parametros de apply
				
			------------------------------------------------
		)
	)
	
	------------------------------------------------------------------------------------------------------------------------------------------------
	--@rollout: rollMainDef | UI para modificar los parametros del override.
	------------------------------------------------------------------------------------------------------------------------------------------------
	rollout rollMainDef "Common Parameters Options Override"
	(
		------------------------------------------------------------------------------------------------
		--COMMON
		------------------------------------------------------------------------------------------------
		
		local parent = undefined --@var : parent | Instancia del override que esta manejando el rollout en ese momento
		local editCA = undefined --@var : editCA | CA de edicion temporal del override.
		
		------------------------------------------------------------------------------------------------
		--VARIABLES
		------------------------------------------------------------------------------------------------
			
		------------------------------------------------------------------------------------------------
		--CONTROLS
		------------------------------------------------------------------------------------------------
		
		--checkbox chkRenderable "Renderable" pos:[5,5] checked:true --@control | chkRenderable | Para que los objetos sean renderizables o no.
		checkbox chkAtmospherics "Atmospherics" pos:[5,5] checked:true tooltip:"" --@control | chkAtmospherics |  Parámetro atmospherics de render.
		checkbox chkEffects "Effects" pos:[5,25] checked:true tooltip:"" --@control | chkEffects | Parámetro de effects de render.  
		checkbox chkDisplacement "Displacement" pos:[5,45] checked:true tooltip:"" --@control | chkDisplacement | Parámetro de displacement de render. 
		checkbox chkVideoColor  "Video Color Check" pos:[5,65] checked:false tooltip:"" --@control | chkVideoColor | Parámetro de Video Color Check de render. 
		checkbox chkRenderToFields "Render To Fields" pos:[5,85] checked:false tooltip:"" --@control | chkRenderToFields | Parámetro Render to Fields de render. 
		checkbox chkRenderHiddenGeometry "Render Hidden Geometry" pos:[150,5] checked:false tooltip:"" --@control | chkRenderHiddenGeometry | Parámetro Render Hidden Geometry 
		checkbox chkAreaLightsShadowsAsPoints "Area Light/Shadow as Points" pos:[150,25] checked:false tooltip:"" --@control | chkAreaLightsShadowsAsPoints | Parámetro Area Light/Shadow as Points  
		checkbox chkForce2Sided "Force 2-Sided" pos:[150,45] checked:true tooltip:"" --@control | chkForce2Sided | Parámetro Force 2 Sided de render 
		checkbox chkSuperBlack "Super Black" pos:[150,65] checked:false tooltip:"" --@control | chkSuperBlack | Parámetro Super Black  de render
		
		
		button btnOk "OK" pos:[5,115] width:170 --@control | btnOk | Valida los cambios y cierra.
		button btnCancel "Cancel" pos:[175,115] width:170 --@control | btnCancel | Cancela los cambios y cierra.
		
		------------------------------------------------------------------------------------------------
		--FUNCTIONS
		------------------------------------------------------------------------------------------------
		
		------------------------------------------------
		--GETS
		------------------------------------------------
		
		------------------------------------------------
		--SETS
		------------------------------------------------
		
		------------------------------------------------
		--OTHER
		------------------------------------------------
		
		------------------------------------------------
		--COMMON
		------------------------------------------------
		
		------------------------------------------------
		--@fn: undefined | loadOverrideInfo | Carga los parametros del override en el UI de edicion del mismo.
		------------------------------------------------
		fn loadOverrideInfo =
		(
			chkAtmospherics.checked = editCA.atmospherics 
			chkEffects.checked = editCA.effects 
			chkDisplacement.checked = editCA.displacement 
			chkVideoColor.checked = editCA.videoColorCheck 
			chkRenderToFields.checked = editCA.renderToFields 
			chkRenderHiddenGeometry.checked = editCA.renderHiddenGeometry 
			chkAreaLightsShadowsAsPoints.checked = editCA.areaLightsShadowsAsPoints 
			chkForce2Sided.checked = editCA.force2Sided  
			chkSuperBlack.checked = editCA.superBlack 
		)
		
		------------------------------------------------
		--@fn: undefined | onCloseOperations | Operaciones necesarias cuando se cierra el rollout.
		------------------------------------------------
		fn onCloseOperations =
		(
			--TO DO
		)
		
		------------------------------------------------
		--@fn: undefined | loadSettings | Carga los settings de la herramienta en el documento de configuración de la misma.
		------------------------------------------------
		fn loadSettings =
		(
			--no carga settings
		)
		
		------------------------------------------------
		--@fn: undefined | saveSettings | Salva los settings de la herramienta en el documento de configuración de la misma.
		------------------------------------------------
		fn saveSettings =
		(
			--no guarda settings
		)
		
		------------------------------------------------------------------------------------------------
		--EVENTS
		------------------------------------------------------------------------------------------------
		
		------------------------------------------------
		--@event: changed | Evento que se lanza al cambiar el valor del checkbutton.
		--@control: checkbox | chkAtmospherics | Checkbox cuyo valor cambia.
		--@gets: float | val | Nuevo valor del checkbox.
		------------------------------------------------
		on chkAtmospherics changed newState do
		(
			editCA.atmospherics = newState
			--print("Atmospherics: " + editCA.atmospherics as String)
		)
		------------------------------------------------
		--@event: changed | Evento que se lanza al cambiar el valor del checkbutton.
		--@control: checkbox | chkEffects | Checkbox cuyo valor cambia.
		--@gets: float | val | Nuevo valor del checkbox.
		------------------------------------------------
		on chkEffects changed newState do
		(
			editCA.effects = newState
			--print("Effects: " + editCA.effects as String)
		)
		
		------------------------------------------------
		--@event: changed | Evento que se lanza al cambiar el valor del checkbutton.
		--@control: checkbox | chkDisplacement | Checkbox cuyo valor cambia.
		--@gets: float | val | Nuevo valor del checkbox.
		------------------------------------------------
		on chkDisplacement changed newState do
		(
			editCA.displacement = newState
			--print("Displacement: " + editCA.displacement as String)
		)
		
		------------------------------------------------
		--@event: changed | Evento que se lanza al cambiar el valor del checkbutton.
		--@control: checkbox | chkVideoColor | Checkbox cuyo valor cambia.
		--@gets: float | val | Nuevo valor del checkbox.
		------------------------------------------------
		on chkVideoColor changed newState do
		(
			editCA.videoColorCheck = newState
			--print("Video Color: " + editCA.videoColorCheck as String)
		)
		------------------------------------------------
		--@event: changed | Evento que se lanza al cambiar el valor del checkbutton.
		--@control: checkbox | chkRenderToFields | Checkbox cuyo valor cambia.
		--@gets: float | val | Nuevo valor del checkbox.
		------------------------------------------------
		on chkRenderToFields changed newState do
		(
			editCA.renderToFields= newState
			--print("Rende to Fields: " + editCA.renderToFields as String)
		)
		------------------------------------------------
		--@event: changed | Evento que se lanza al cambiar el valor del checkbutton.
		--@control: checkbox | chkRenderHiddenGeometry | Checkbox cuyo valor cambia.
		--@gets: float | val | Nuevo valor del checkbox.
		------------------------------------------------
		on chkRenderHiddenGeometry changed newState do
		(
			editCA.renderHiddenGeometry = newState
			--print("Render Hidden Geometry: " + editCA.renderHiddenGeometry as String)
		)
		------------------------------------------------
		--@event: changed | Evento que se lanza al cambiar el valor del checkbutton.
		--@control: checkbox | chkAreaLightsShadowsAsPoints | Checkbox cuyo valor cambia.
		--@gets: float | val | Nuevo valor del checkbox.
		------------------------------------------------
		on chkAreaLightsShadowsAsPoints changed newState do
		(
			editCA.areaLightsShadowsAsPoints = newState
			--print("Area Lights: " + editCA.areaLightsShadowsAsPoints as String)
		)
		------------------------------------------------
		--@event: changed | Evento que se lanza al cambiar el valor del checkbutton.
		--@control: checkbox | chkForce2Sided | Checkbox cuyo valor cambia.
		--@gets: float | val | Nuevo valor del checkbox.
		------------------------------------------------
		on chkForce2Sided changed newState do
		(
			editCA.force2Sided = newState
			--print("Force 2 Sided: " + editCA.force2Sided as String)
		)
		------------------------------------------------
		--@event: changed | Evento que se lanza al cambiar el valor del checkbutton.
		--@control: checkbox | chkSuperBlack | Checkbox cuyo valor cambia.
		--@gets: float | val | Nuevo valor del checkbox.
		------------------------------------------------
		on chkSuperBlack changed newState do
		(
			editCA.superBlack = newState
			--print("Super Black: " + editCA.superBlack as String)
		)
		
		------------------------------------------------
		--@event: pressed | Evento que se lanza al presionar el boton. Salva los cambios.
		--@control: button | btnOk | Boton presionado.
		------------------------------------------------
		on btnOk pressed do
		(
			parent.applyEditChanges() --aplica los cambios que se hayan hecho en el override
			destroyDialog parent.rollMain
		)
		
		------------------------------------------------
		--@event: pressed | Evento que se lanza al presionar el boton. Cambia los cambios.
		--@control: button | btnOk | Boton presionado.
		------------------------------------------------
		on btnCancel pressed do
		(
			destroyDialog parent.rollMain
		)
		
		------------------------------------------------
		--COMMON
		------------------------------------------------
		
		------------------------------------------------
		--@event: resized | Evento que se lanza al redimensionar el rollout.
		--@control: rollout | rollMainDef | El elemento que sufre la redimensión. El rollout principal de la herramienta.
		--@gets: point2 | size | tamaño al que se ha redimensionado el rollout
		------------------------------------------------
		on rollMainDef resized size do
		(
			--no se redimensiona
		)
		
		------------------------------------------------
		--@event: open | Evento que se lanza al abrir el rollout.
		--@control: rollout | rollMainDef | El elemento que se abre. El rollout principal de la herramienta.
		------------------------------------------------
		on rollMainDef open do
		(

			parent = lb.passManager.getCurrentEditInstance()
			editCA = parent.editBackupNode.custAttributes[#overridecommonParametersOptionsInfo]
			
			loadOverrideInfo()
			loadSettings()
		)
		
		------------------------------------------------
		--@event: close | Evento que se lanza al cerrar el rollout.
		--@control: rollout | rollMainDef | El elemento que se cierra. El rollout principal de la herramienta.
		------------------------------------------------
		on rollMainDef close do
		(	
			onCloseOperations()
			saveSettings()			
		)
		
	)--rollMainDef
	
	------------------------------------------------------------------------------------------------------------------------------------------------
	--@struct: overridecommonParametersOptions | Contiene todas las funciones de un override de commonParametersOptions.
	------------------------------------------------------------------------------------------------------------------------------------------------
	struct str_overridecommonParametersOptions
	(
		------------------------------------------------------------------------------------------------
		--COMMON
		------------------------------------------------------------------------------------------------
		
		def = (classof this),				--@var: def | Almacena la definicion del struct.
		defFile = getThisScriptFilename(),	--@var: defFile | Almacena la ruta del propio archivo de script que contiene la definicion.
			
		------------------------------------------------------------------------------------------------
		--VARIABLES
		------------------------------------------------------------------------------------------------
		
		type = "override",		--@var | type | Indica que es un override.
		subType = lb.overrides.getFileOverrideName (getThisScriptFilename() as string),	--@var | subType | Indica que tipo de override concreto almacena.
		relatedTypes = #(), --@var | relatedTypes | Tipos de overrides relacionados.
		
		stateMessage = "", --@var | stateMessage | Mensaje del estado actual del override.
		
		infoNode,						--@var | infoNode | Nodo de la escena que guarda la información del override de forma permanente.
		infoNodePrefix = "override-",	--@var | infoNodePrefix | Prefijo de los nodos de la escena que representan cada override.
		
		infoNodeCA,		--@var | infoNodeCA | CA del override de donde obtener y donde salvar la informacion.
		
		editBackupNode,	--@var | editBackupNode | Nodo de backup temporal donde se almacena una copia del CA durante la edicion para poder hacer undo de las operaciones
		
		uiObj = undefined,	--@var | uiObj | Objeto de interfaz equivalente a este override, para poder buscar la equivalencia de forma rápida entre un override y el objeto de interface que lo controla.
		
		overrideManager = undefined, --@var | overrideManager | override generico del que cuelga este override específico.
		
		overrideInfo = ca_overridecommonParametersOptionsInfo,		--@var | overrideInfo | Custom attribute para almacenar los datos de cada override en el objeto.
		--overrideBackup = ca_overridecommonParametersOptionsBackup,	--@var | overrideBackup | Custom attribute para almacenar los datos de cada backup de override en el objeto de backup.
		
		------------------------------------------------------------------------------------------------
		--LIBRARIES
		------------------------------------------------------------------------------------------------
		
		------------------------------------------------------------------------------------------------
		--ROLLOUTS
		------------------------------------------------------------------------------------------------
		
		rollMain = rollMainDef, --@var: rollMain | Almacena el rollout de edicion del override.
		
		------------------------------------------------------------------------------------------------
		--FUNCTIONS
		------------------------------------------------------------------------------------------------
			
		------------------------------------------------
		--GETS
		------------------------------------------------
			
		------------------------------------------------
		--@fn: string | getType | Devuelve el tipo del override.
		------------------------------------------------
		fn getType =
		(
			this.infoNodeCA.type
		),
			
		------------------------------------------------
		--@fn: string | getSubType | Devuelve el subtipo del override.
		------------------------------------------------
		fn getSubType =
		(
			this.infoNodeCA.subType
		),
		
		------------------------------------------------
		--@fn: node | getInfoNode | Devuelve el nodo físico de la escena que contiene la información del override.
		------------------------------------------------
		fn getInfoNode =
		(
			this.infoNode
		),
		
		------------------------------------------------
		--@fn: dotneObject | getUiObj | Devuelve el objeto de interface .net que controla este objeto.
		------------------------------------------------
		fn getUiObj =
		(
			this.uiObj
		),
		
		------------------------------------------------
		--@fn: override | getOverrideManager | Devuelve el override principal del que cuelga el especifico.
		------------------------------------------------
		fn getOverrideManager =
		(
			this.overrideManager
		),
		
		------------------------------------------------
		--@fn: container | getParentContainer | Devuelve el contenedor del que cuelga este override.
		------------------------------------------------
		fn getParentContainer =
		(
			if this.overrideManager != undefined then this.overrideManager.getParentContainer() else undefined
		),
		
		------------------------------------------------
		--@fn: string | getInfo | Devuelve la informacion que se debe mostrar en el UI.
		------------------------------------------------
		fn getInfo =
		(
			_info = ""

			if this.infoNodeCA.atmospherics then _info += "atmphs"
			if this.infoNodeCA.effects then _info += if _info == "" then "effs" else ", effs"
			if this.infoNodeCA.displacement then _info += if _info == "" then "disp" else ", disp"
			if this.infoNodeCA.videoColorCheck then _info += if _info == "" then "vColor" else ", vColor"
			if this.infoNodeCA.renderToFields then _info += if _info == "" then "fields" else ", fields"
			if this.infoNodeCA.renderHiddenGeometry then _info += if _info == "" then "hidden" else ", hidden"
			if this.infoNodeCA.areaLightsShadowsAsPoints then _info += if _info == "" then "area" else ", area"
			if this.infoNodeCA.force2Sided then _info += if _info == "" then "2sided" else ", 2sided"
			if this.infoNodeCA.superBlack then _info += if _info == "" then "sblack" else ", sblack"
						
			_info			
		),
		
		------------------------------------------------
		--@fn: name | getState | Devuelve el estado del override. Puede ser #ok, #error o #warning.
		------------------------------------------------
		fn getState =
		(
			_state = #ok		
			
			_state
		),
		
		------------------------------------------------
		--@fn: name | getStateMessage | Devuelve el mensaje del estado actual del override.
		------------------------------------------------
		fn getStateMessage =
		(
			this.stateMessage
		),
		
		------------------------------------------------
		--SETS
		------------------------------------------------
		
		------------------------------------------------
		--@fn: undefined | setUiObj | Sustituye el objeto de interface relacionado con el override.
		--@gets: dotNetObject | newUiObj | Nuevo elemento de interface relacionado con el override.
		------------------------------------------------
		fn setUiObj newUiObj =
		(
			this.uiObj = newUiObj
		),
		
		------------------------------------------------
		--@fn: undefined | setOverrideManager | Sustituye el override principal del que cuelga el especifico.
		--@gets: override | newOverrideManager | Nuevo override principal.
		------------------------------------------------
		fn setOverrideManager newOverrideManager =
		(
			this.overrideManager = newOverrideManager
		),
		
		------------------------------------------------
		--OTHER
		------------------------------------------------
		
		------------------------------------------------
		--@fn: undefined | updateUIinfo | Actualiza la informacion del override en su objeto de UI si tuviera.		
		------------------------------------------------
		fn updateUIinfo =
		(
			--si hay nodo que actualizar
			if this.getUiObj() != undefined then
			(
				--actualiza los valores de las columnas
				(this.getUiObj()).setValue 1 (this.getInfo())
				(this.getUiObj()).setValue 5 (this.getState() as string)
					
				--actualiza el icono de estado
				lb.passManagerUI.rollMain.updateTrvContainerAppearance mode:#state node:(this.getUiObj())
					
				--actualiza los overrides relacionados
				for _relType in this.relatedTypes do
				(
					_relOverrides = (this.getOverrideManager()).getRelativeDescendantsOverride _relType
					for _relOv in _relOverrides do _relOv.updateUIinfo()
				)--for
			)
		),
		
		------------------------------------------------
		--@fn: boolean | createBackup | Crea el backup de este override antes de aplicarse
		--@gets: node | backupNode | Objeto en el que hacer el backup.
		------------------------------------------------
		fn createBackup backupNode saveLogs:false logLevel:1 =
		(
			if saveLogs then lb.log.add ("BACKUP process start") sender:("override." + (this.getSubType())) type:#info level:logLevel
				
			--solo si se ha suministrado un nodo de backup
			if isValidNode backupNode then
			(
				_backupCA = backupNode.custAttributes[#overridecommonParametersOptionsInfo]
				
				--si el nodo de backup no tiene el CA de backup se lo pone
				if _backupCA == undefined then
				(
					custAttributes.add backupNode (this.overrideInfo) #unique baseobject:false --le añade el atributo
					_backupCA = backupNode.custAttributes[#overridecommonParametersOptionsInfo]
				)
					
				_backupCA.atmospherics = rendAtmosphere
				_backupCA.effects = renderEffects
				_backupCA.displacement = renderDisplacements 
				_backupCA.videoColorCheck = rendColorCheck 
				_backupCA.renderToFields = rendFieldRender 
				_backupCA.renderHiddenGeometry = rendHidden   
				_backupCA.areaLightsShadowsAsPoints = rendSimplifyAreaLights 
				_backupCA.force2Sided = rendForce2Side 
				_backupCA.superBlack = rendSuperBlack
				
				if saveLogs then lb.log.add ("BACKUP process completed.") sender:("override." + (this.getSubType())) type:#ok level:logLevel
				
				true
			)--if
			else
			(
				if saveLogs then lb.log.add ("BACKUP process error. Backup node is not valid.") sender:("override." + (this.getSubType())) type:#error level:logLevel
				lb.passManager.addErrorMessage ((this.overrideManager.getOverrideTrace this) + "\x0D"+"BACKUP process error. Backup node is not valid.")
				false
			)--if else
		),
		
		------------------------------------------------
		--@fn: boolean | restoreBackup | Restaura los valores anteriores de este override a partir de su backup
		--@gets: node | backupNode | Objeto del que restaurar el backup.
		------------------------------------------------
		fn restoreBackup backupNode saveLogs:false logLevel:1 =
		(
			
			if saveLogs then lb.log.add ("RESTORE process start.") sender:("override." + (this.getSubType())) type:#info level:logLevel
			
			--solo si se ha pasado un nodo de backup y este tiene backup de este tipo de override
			if isValidNode backupNode then
			(	
				_backupCA = backupNode.custAttributes[#overridecommonParametersOptionsInfo]				
				
				if _backupCA != undefined then
				(
					rendAtmosphere = _backupCA.atmospherics
					renderEffects = _backupCA.effects
					renderDisplacements = _backupCA.displacement  
					rendColorCheck = _backupCA.videoColorCheck 
					rendFieldRender = _backupCA.renderToFields
					rendHidden  = _backupCA.renderHiddenGeometry 
					rendSimplifyAreaLights  = _backupCA.areaLightsShadowsAsPoints 
					rendForce2Side = _backupCA.force2Sided 
					rendSuperBlack = _backupCA.superBlack
					if saveLogs then lb.log.add ("RESTORE process completed.") sender:("override." + (this.getSubType())) type:#ok level:logLevel
					
					true
				)
				else
				(
					if saveLogs then lb.log.add ("RESTORE process error. Backup node is undefined.") sender:("override." + (this.getSubType())) type:#error level:logLevel
					lb.passManager.addErrorMessage ((this.overrideManager.getOverrideTrace this) + "\x0D"+"RESTORE process error. Backup node is undefined.")
					false
				)--if else
			)--if
			else
			(
				if saveLogs then lb.log.add ("RESTORE process error. Backup node is not valid.") sender:("override." + (this.getSubType())) type:#error level:logLevel
				lb.passManager.addErrorMessage ((this.overrideManager.getOverrideTrace this) + "\x0D"+"RESTORE process error. Backup node is not valid.")
				false
			)--if else
		),
		
		------------------------------------------------
		--@fn: boolean | apply | Aplica el override a los objetos o parametros correspondientes.
		------------------------------------------------
		fn apply saveLogs:false logLevel:1 =
		(
			if saveLogs then lb.log.add ("APPLY process start.") sender:("override." + (this.getSubType())) type:#info level:logLevel
			
			rendAtmosphere = this.infoNodeCA.atmospherics
			renderEffects = this.infoNodeCA.effects
			renderDisplacements = this.infoNodeCA.displacement
			rendColorCheck = this.infoNodeCA.videoColorCheck
			rendFieldRender = this.infoNodeCA.renderToFields
			rendHidden  = this.infoNodeCA.renderHiddenGeometry
			rendSimplifyAreaLights  = this.infoNodeCA.areaLightsShadowsAsPoints
			rendForce2Side = this.infoNodeCA.force2Sided
			rendSuperBlack = this.infoNodeCA.superBlack
			if saveLogs then lb.log.add ("APPLY process completed.") sender:("override." + (this.getSubType())) type:#ok level:logLevel
			true
		),
		
		------------------------------------------------
		--@fn: undefined | applyEditChanges | Aplica los cambios que se han hecho en el override durante la edicion.
		------------------------------------------------
		fn applyEditChanges =
		(
			--solo si existe el nodo de backup de override puede hacerlo
			if this.editBackupNode != undefined then
			(
				_backupCA = this.editBackupNode.custAttributes[#overridecommonParametersOptionsInfo]
				
				--le quita el CA del override si lo tuviera
				if _backupCA != undefined then
				(
					undo "Override Changes Applied" on
					(
						--copia  todas las propiedades del CA
						_propNames = getPropNames (this.infoNodeCA)
						for _prop in _propNames do (setProperty this.infoNodeCA _prop (getProperty _backupCA _prop))
					)--undo
					
					this.editBackupNode = undefined --hace que el override no tenga backup de edicion almacenado
					
					this.updateUIinfo() --actualiza la infirmacion en el UI si ha cambiado
				)--if
			)--if
		),
		
		------------------------------------------------
		--@fn: undefined | edit | Crea el backup de edicion del override para que lo cambios se apliquen solo al aceptar y se pueda hacer undo de ello.		
		------------------------------------------------
		fn createEditBackup =
		(
			--solo si el override cuelga de un contenedor
			if (this.getParentContainer()) != undefined then
			(
				--obtiene el inicio de la jerarquia del arbol de contenedores
				_passTree = (this.getParentContainer()).getRootContainer()
				
				if _passTree != undefined then --si ha conseguido llegar a la raiz
				(
					--obtiene el nodo de backup de edicion de override
					this.editBackupNode = _passTree.getOverridesEditBackupNode()
					
					--solo si existe el nodo de backup de override puede hacerlo
					if this.editBackupNode != undefined then
					(
						--le quita el CA del override si lo tuviera
						if this.editBackupNode.custAttributes[#overridecommonParametersOptionsInfo] != undefined then
							custAttributes.delete this.editBackupNode (custAttributes.getDef this.editBackupNode.custAttributes[#overridecommonParametersOptionsInfo]) baseobject:false --elimina el viejo
						
						--le aplica el CA del override
						custAttributes.add this.editBackupNode (this.overrideInfo) #unique baseobject:false --le añade el atributo nuevo

						--copia todas las propiedades del CA
						_propNames = getPropNames (this.infoNodeCA)
						for _prop in _propNames do (setProperty (this.editBackupNode.custAttributes[#overridecommonParametersOptionsInfo]) _prop (getProperty (this.infoNodeCA) _prop))
					)--if
				)--if
			)--if
		),
		
		------------------------------------------------
		--@fn: undefined | edit | Muestra el dialogo de edicion del override.
		--@opt: Point2 | pos | [0,0] | Posicion en la que aparecera el rollout de edicion del override.
		------------------------------------------------
		fn edit pos:[0,0] =
		(
			this.createEditBackup() --crea el backup de edicion del override para que lo cambios se apliquen solo al aceptar y se pueda hacer undo de ello 			
			
			lb.passManager.setCurrentEditInstance this
			
			_size = [350,140]
			_pos = pos - (_size/2)
			
			createDialog this.rollMain lockwidth:true lockheight:true pos:_pos width:_size.x height:_size.y modal:true style:#(#style_toolwindow, #style_titlebar, #style_sysmenu, #style_resizing)
		),
		
		------------------------------------------------
		--@fn: boolean | purge | Limpia el override por si se ha cambiado informacion y hay que mantenerla coherente.
		------------------------------------------------
		fn purge =
		(
			_success = false
			
			--TO DO: Aqui hacer el codigo de purga
			
			_success = true
			
			_success
		),
		
		
		------------------------------------------------
		--@fn: undefined | reset | resetea los valores a los que tiene por defecto.
		------------------------------------------------
		fn reset =
		(
			--TO DO: Aqui restaurar los valores a los que tiene por defecto
		),

		------------------------------------------------
		--@fn: undefined | storeSceneValues | Almacena los valores de la escena en el override.
		------------------------------------------------
		fn storeSceneValues =
		(
			rendForce2Side = true
			this.infoNodeCA.atmospherics = rendAtmosphere
			this.infoNodeCA.effects = renderEffects
			this.infoNodeCA.displacement = renderDisplacements 
			this.infoNodeCA.videoColorCheck = rendColorCheck 
			this.infoNodeCA.renderToFields = rendFieldRender 
			this.infoNodeCA.renderHiddenGeometry = rendHidden  
			this.infoNodeCA.areaLightsShadowsAsPoints = rendSimplifyAreaLights 
			this.infoNodeCA.force2Sided = rendForce2Side
			this.infoNodeCA.superBlack = rendSuperBlack
		),
		
		------------------------------------------------
		--@fn: undefined | construct | Rellena la información del override y crea el objeto fisico en la escena que contendrá la información.
		------------------------------------------------
		fn construct =
		(
			--si existe el nodo de la escena con la información la coge de el.
			if isValidNode this.infoNode then
			(	
				--almacena el CA con la informacion en una varaible interna
				this.infoNodeCA = this.infoNode.custAttributes[#overridecommonParametersOptionsInfo]
				
				--Si se esta construyendo el objeto no tendra el CA aplicado, con lo cual hay que ponerselo. Si ya lo tiene no.
				if not (lb.customAttributes.hasAttribute this.infoNode #overridecommonParametersOptionsInfo) then
				(
					custAttributes.add this.infoNode (this.overrideInfo) #unique baseobject:false --le añade el atributo
					
					--almacena el CA con la informacion en una varaible interna
					this.infoNodeCA = this.infoNode.custAttributes[#overridecommonParametersOptionsInfo]					
					
					this.storeSceneValues()
				)--if			
				
				--primero mira si hay cambios en la escena que afecten al override y lo limpia
				this.purge()
			)--if				
		),
		
		------------------------------------------------
		--@fn: string | toString | Devuelve un string con la representacion del contenido del override.
		------------------------------------------------
		fn toString =
		(	
			--primero mira si hay cambios en la escena que afecten al override y lo limpia
			this.purge()
			
			_theString = ""
				
			--TO DO: Aqui falta todo el codigo del toString
			
			_theString
		),
		
		------------------------------------------------
		--COMMON
		------------------------------------------------
			
		------------------------------------------------
		--@fn: undefined | initSubLibraries | Inicializa todas las sublibrerías en el orden establecido.
		------------------------------------------------
		fn initSubLibraries =
		(
			_subLibraries = #()
			
			for sl in _subLibraries do sl.init()
		),
		
		------------------------------------------------
		--@fn: undefined | init | Inicializa la librería.
		------------------------------------------------
		fn init =
		(		
			this.initSubLibraries() --inicialza las librerías hijas
		),		
		
		------------------------------------------------------------------------------------------------
		--EVENTS
		------------------------------------------------------------------------------------------------
		
		------------------------------------------------
		--@event | create | Ejecución al crearse la instancia del struct.
		on create do
		(
			this.construct() --genera toda la información necesaria y el nodo de la escena donde almacenarla en paralelo, o lee el ya existente en la escena.
		)
		
	)--str_overridecommonParametersOptions
	
	lb.overrides.add (lb.overrides.getFileOverrideName (getThisScriptFilename() as string)) str_overridecommonParametersOptions --añade el override al listado de overrides disponibles
	
	ok
)