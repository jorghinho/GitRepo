------------------------------------------------------------------------------------------------------------------------------------------------
--Descripcion: Herramienta Plantilla.
------------------------------------------------------------------------------------------------------------------------------------------------
(
	------------------------------------------------------------------------------------------------------------------------------------------------
	--@rollout: rollMain | Contiene la herramienta plantilla.
	------------------------------------------------------------------------------------------------------------------------------------------------
	rollout rollMainDef "RigFBXExporter"
	(
		------------------------------------------------------------------------------------------------
		--COMMON
		------------------------------------------------------------------------------------------------
		
		local parent = lb.getTool (lb.getFileToolName (getThisScriptFilename() as string)) --@var : parent | Herramienta o rolllout del que depende y/o contiene el rollout actual
		
		local minRollWidth = 225		--@var: minRollWidth | Ancho mínimo de la herramienta.
		local minRollHeight = 360		--@var: minRollHeight | Alto mínimo de la herramienta.
		
		------------------------------------------------------------------------------------------------
		--VARIABLES
		------------------------------------------------------------------------------------------------

		local _assetNodeInfos = #()
		
		------------------------------------------------------------------------------------------------
		--CONTROLS
		------------------------------------------------------------------------------------------------
		
		--@control | controlName | Plantilla de comentario para controles
		groupbox gbxExportSetup "Export Setup" width:200 height:175
		groupBox gpbxLbl "" pos:[20,20] width:185
		label lblTimeRange "Time range:" pos:[30,30]
		label lblTimeStart "0" pos:[110,30]
		label lblTimeSeparator "-" pos:[140,30]
		label lblTimeEnd "100" pos:[160,30]
		groupBox gbxOverrideTimeGroup "Override time range" pos:[20,55] width:185 height:65
		checkbox chbxEnable "Enable override" pos:[30,75]
		spinner spnOverTimeStart "Start" range:[-99999,99999,0] type:#integer enabled:false width:75 pos:[35,95]
		spinner spnOverTimeEnd "End" range:[-99999,99999,100] type:#integer enabled:false width:75 pos:[125,95]
		checkbox chbfreezeAtZero "Pose T at frame" checked:false pos:[20,125] enabled:false
		spinner spnoverrideFreezeFrame "" range:[-99999,99999,-1] type:#integer enabled:false width:55 pos:[150,125]
		button btnPreOperation "Pre Export Process" pos:[20,150] width:185
		groupbox editPoly "Mesh operations" pos:[12,185] width:202 height:140
		checkbutton chkOperateOnSelAssets "Sel Assets" pos:[20,205] width:90 height:20 checked:true
		checkbutton ckbOperateOnSelection "Sel Objects" pos:[115,205] width:90 height:20
		button addCrowdEP "Add Crowd Edit Poly" pos:[20,230] width:185 height:25
		button deleteCrowdEP "Delete Crowd Edit Poly" pos:[20,260] width:185 height:25
		button toggleCrowdEP "Toggle Asset's Crowd Edit Poly" pos:[20,290] width:185 height:25
		button btnExport "Export Rig to FBX" pos:[10,330] width:205


		------------------------------------------------------------------------------------------------
		--FUNCTIONS
		------------------------------------------------------------------------------------------------

		
		------------------------------------------------
		--GETS
		------------------------------------------------
		
		------------------------------------------------
		--SETS
		------------------------------------------------
		
		------------------------------------------------
		--OTHER
		------------------------------------------------
		
		------------------------------------------------
		--COMMON
		------------------------------------------------

		------------------------------------------------
		--@fn: undefined | updateSceneAnimRange | Función para recoger los paths de los assets de escena (se borra la info al simplificar.)
		------------------------------------------------
		fn getSceneAssetsPaths = 
		(
			_sceneAssets = lb.asset.getSceneAssets()

			_assetPaths = #()
			for i = 1 to _sceneAssets.count do 
			(
				_tmpArray = #()
				append _tmpArray _sceneAssets[i].fullname
				append _tmpArray _sceneAssets[i].folder
				append _assetPaths _tmpArray
			)
			return _assetPaths
		)

		------------------------------------------------
		--@fn: undefined | updateSceneAnimRange | Callback de Update para el marcador de inicio final de animación.
		------------------------------------------------		
		fn updateSceneAnimRange = 
		(
			lblTimeStart.text = animationRange.start as string
			lblTimeEnd.text = animationRange.end as string
		)
		
		------------------------------------------------
		--@fn: undefined | createSceneEvents | Crea los callbacks relacionados con el rollout
		------------------------------------------------
		fn createSceneEvents =
		(
			 callbacks.addScript #animationRangeChange "lb.RigFBXExporter.rollmain.updateSceneAnimRange()" id:#animRangeChange
		)
		
		------------------------------------------------
		--@fn: undefined | removeSceneEvents | Destruye los callbacks relacionados con el rollout
		------------------------------------------------
		fn removeSceneEvents =
		(
			 callbacks.removeScripts id:#animRangeChange
		)

		------------------------------------------------
		--@fn: undefined | assumeSkinPoseAndFreezeTR | Realiza un FreezeTransform de los controladores de los nodos proporcionados Haciendo un SetSkinPose.
		--@gets: array | _nodeSelection | Asset al que aplicar la función
		------------------------------------------------
		fn assumeSkinPoseAndFreezeTR _asset =
		(
			for _node in _asset.skinNodesAll where isValidNode _node do 
			(
				_node.setSkinPose()
				lb.controller.freezeTransform _node #all 
				_node.assumeSkinPose()
				lb.controller.freezeTransform _node #all  
			)
		)

		------------------------------------------------
		--@fn: undefined | BakeAnimToSkin | Bakea la animación del esqueleto de Animación de un asset 
		--@gets: array | _asset | Asset al que aplicar la función
		------------------------------------------------		
		fn BakeAnimToSkin _asset _startFrame:animationRange.start _endFrame:animationRange.end =
		(
			with animate on 
			(
				for i = _startFrame to _endFrame do 
				(
					sliderTime = i
					
					for _node in _asset.skinNodesAll where isvalidNode _node do 
					(
						_nodeSkinTmpName = FilterString _node.name "_"
						_nodeSkinTmpName = _nodeSkinTmpName[4]+"_"+_nodeSkinTmpName[5]
						for _nodeAnim in _asset.animNodesAll where isvalidNode _nodeAnim do 
						(
							_nodeAnimTmpName = FilterString _nodeAnim.name "_"
							_nodeAnimTmpName = _nodeAnimTmpName[4]+"_"+_nodeAnimTmpName[5]

							if _nodeSkinTmpName == _nodeAnimTmpName do 
							(
								_node.transform = _nodeAnim.transform
							)
						)
					)
				)
			)
		)

		------------------------------------------------
		--@fn: undefined | relinkNodes | Relinka los objetos que se han quedado colgados en los assets.
		--@gets: array | _asset | Asset al que aplicar la función
		------------------------------------------------		
		fn relinkNodes _asset =
		(
			for _node in _asset.skinNodesAll where isValidNode _node do 
			(
				_nodeNameParts = FilterString _node.name "_" 
				if _nodeNameParts[5] == "spine00" do 
				(
					for _nodeParent in _asset.skinNodesAll where isValidNode _nodeParent do 
					(
						_nodeParentParts = FilterString _nodeParent.name "_" 
						if _nodeParentParts[5] == "root" do 
						(
							_node.parent = _nodeParent
						)
					)
				)
				if( _nodeNameParts[5] == "clavicle") or ( _nodeNameParts[5] == "neck") do 
				(
					for _nodeParent in _asset.skinNodesAll where isValidNode _nodeParent do 
					(
						_nodeParentParts = FilterString _nodeParent.name "_" 
						if _nodeParentParts[5] == "spine03" do 
						(
							_node.parent = _nodeParent
						)
					)
				)
				if _nodeNameParts[5] == "thigh" do 
				(
					for _nodeParent in _asset.skinNodesAll where isValidNode _nodeParent do 
					(
						_nodeParentParts = FilterString _nodeParent.name "_" 
						if _nodeParentParts[5] == "pelvis" do 
						(
							_node.parent = _nodeParent
						)
					)
				)
			)
		)

		------------------------------------------------
		--@fn: undefined | simplifySkinRig | Borra Todos los nodos no utiles del esqueleto de rig.
		------------------------------------------------		
		fn simplifySkinRig  = 
		(

			_sel = getCurrentSelection()
			if _sel.count > 0 then 
			(
				max modify mode
				SuspendEditing()

				--Rompemos las referencias
				lb.xrefBreaker.rollMain.xrefBreaker _promptMessage:false

				_assetsToUse = lb.asset.getAssetsFromNodes _sel
				process = lb.message.show "This process cannot be undone, do you want to proceed?" type:#query
				if process do 
				(
					
					for _assetToUse in _assetsToUse do 
					(

						for i=1 to _assetToUse.meshNodesAll.count do 
						(
							_foundEP = false 
							if isValidNode _assetToUse.meshNodesAll[i] then 
							(
								--Borramos los modificadores de TurboSmooth y añadimos el edit poly de crowds si no existe
								for j=_assetToUse.meshNodesAll[i].modifiers.count to 1 by -1 do 
								(
									--Limpiamos todos los turbosmooths de las piezas
									--if classOf _assetToUse.meshNodesAll[i].modifiers[j] == TurboSmooth do deleteModifier _assetToUse.meshNodesAll[i] _assetToUse.meshNodesAll[i].modifiers[j]
									--EDIT Borramos todos los modificadores que no sean EDIT Poly 
									if classOf _assetToUse.meshNodesAll[i].modifiers[j] != Edit_Poly do deleteModifier _assetToUse.meshNodesAll[i] _assetToUse.meshNodesAll[i].modifiers[j]
									if (classOf _assetToUse.meshNodesAll[i].modifiers[j] == Edit_Poly) and (_assetToUse.meshNodesAll[i].modifiers[j].name == "Crowd_Edit_Poly") do _foundEP = true

								)
								--Si no encontramos el modificador edit poly de crowds le añadimos uno.
								if not _foundEP do 
								(
									_crowdEditPoly = Edit_Poly()
									_crowdEditPoly.name = "Crowd_Edit_Poly"
									addModifier _assetToUse.meshNodesAll[i] (_crowdEditPoly) before:20
								)	
							)
						)

						--Forzamos el modo Skin para que se conecten los huesos de skin.
						lb.asset.setAssetSkinMode _assetToUse

						--Dejamos visibles los nodos de skin durante el proceso.
						_assetToUse.meshNodesAll.isHidden = true
						_assetToUse.skinNodesAll.isHidden = false

						rigNodes = (lb.asset.getAssetAnimNodes _assetToUse lb.nc.NC_classAnim excludeExtras:true)
						if chbfreezeAtZero.checked == false then 
						(
							with animate on 
							(
								at time (0 as time) lb.animinfo.createAnimTracksKey (rigNodes)
								select rignodes
								--at time (-1 as time) for _o in rigNodes do lb.controller.transformtozero _o #all 	
								for o in selection do
								(
									_tracks = lb.animInfo.getTracksFromObject o
									at time (0 as time) lb.animInfo.setTracksValue _tracks #default
								)
							)
						)
						else 
						(
							with animate on 
							(
								at time ((spnoverrideFreezeFrame.value +1 ) as time) lb.animinfo.createAnimTracksKey (rigNodes)
								--at time (spnoverrideFreezeFrame.value as time) for _o in rigNodes do lb.controller.transformtozero _o #all 
								select rignodes
								for o in selection do
								(
									_tracks = lb.animInfo.getTracksFromObject o
									at time ((spnoverrideFreezeFrame.value +1 ) as time) lb.animInfo.setTracksValue _tracks #default
								)
							)
						)

						--Primero se borraran los elementos que llevan controladores de escala. (pieza final de los dedos en hidden de skin)
						for i = _assetToUse.skinNodesAll.count to 1 by -1 do 
						(
							if isValidNode _assetToUse.skinNodesAll[i] do
							(
								_nodeNameParts = FilterString _assetToUse.skinNodesAll[i].name "_"
								if matchpattern _nodeNameParts[5] pattern: "finger??End" do 
								(
									delete _assetToUse.skinNodesAll[i]
								)
							)
						)

						--Borrado de las falanges de skin, porque cuelgan controladores y hay que ir con cuidado.
						_nodesToDelete = #()
						for i = _assetToUse.skinNodesAll.count to 1 by -1 do 
						(
							if isValidNode  _assetToUse.skinNodesAll[i] do 
							(
								_nodeNameParts = FilterString _assetToUse.skinNodesAll[i].name "_"
								_lastPart = _nodeNameParts[_nodeNameParts.count]
								if  matchpattern _lastPart pattern:("*h*") then 
								(
									if not matchpattern _nodeNameParts[5] pattern:("*-expose*") then 
									(
										append _nodesToDelete _assetToUse.skinNodesAll[i]
									)
								)
							)

						)
						delete _nodesToDelete

						--Borrado de las piezas sobrantes del esqueleto de skin
						for i = _assetToUse.skinNodesAll.count to 1 by -1 do 
						(
							if isValidNode  _assetToUse.skinNodesAll[i] do 
							(
								_nodeNameParts = FilterString _assetToUse.skinNodesAll[i].name "_"
								_lastPart = _nodeNameParts[_nodeNameParts.count]
								--Piezas ocultas
								if  matchpattern _lastPart pattern:("*h*") then 
								(
									delete _assetToUse.skinNodesAll[i]
								)
								--Piezas visibles que no conforman el esqueleto principal
								if (not matchpattern _nodeNameParts[5] pattern: "root") and (not matchpattern _nodeNameParts[5] pattern: "pelvis") and (not matchpattern _nodeNameParts[5] pattern: "thigh") and (not matchpattern _nodeNameParts[5] pattern: "calf") and (not matchpattern _nodeNameParts[5] pattern: "instep") and (not matchpattern _nodeNameParts[5] pattern: "toeCap")  and (not matchpattern _nodeNameParts[5] pattern: "neck")  and (not matchpattern _nodeNameParts[5] pattern: "spine*")  and (not matchpattern _nodeNameParts[5] pattern: "clavicle")  and (not matchpattern _nodeNameParts[5] pattern: "upperarm")  and (not matchpattern _nodeNameParts[5] pattern: "forearm") and (not matchpattern _nodeNameParts[5] pattern: "hand")  and (not matchpattern _nodeNameParts[5] pattern: "head") and (not matchpattern _nodeNameParts[5] pattern: "finger??") do
								(
									if isValidNode _assetToUse.skinNodesAll[i] do delete _assetToUse.skinNodesAll[i]
								)     
							)
						)

						--Se rehace la jerarquia para los huesos de skin de los que se han borrado partes.
						relinkNodes _assetToUse

						--firstFrame = animationRange.start
						--animationRange = interval 0 animationRange.end

						--transform to zero de los huesos de skin.
						_selection = #()
						for _node in _assetToUse.skinNodesAll do 
						(
							if isValidNode _node do append _selection _node
						)
						select _selection


						--Transform to zero de los huesos de rig.
						if chbfreezeAtZero.checked == false then 
						(
							at time 0f lb.transformToZero.transtoZero()
						)
						else 
						(
							at time (spnoverrideFreezeFrame.value as time) lb.transformToZero.transtoZero()
						)


						--Freezeamos las transformaciones de los huesos de skin
						if chbfreezeAtZero.checked == false then 
						(
							at time 0f assumeSkinPoseAndFreezeTR _assetToUse
						)
						else 
						(
							at  time (spnoverrideFreezeFrame.value as time) assumeSkinPoseAndFreezeTR _assetToUse
						)

						
						_headRefNode = undefined
						--Obtenemos la refencia de la cabeza para linkar los ojos, mandibula y lengua.
						for _meshNode in _assetToUse.meshNodesAll where isValidNode _meshNode do 
						(
							_meshNodeParts = FilterString _meshNode.name "_"
							if _meshNodeParts[5] == "head" do _headRefNode = _meshNode
						)

						--ATTACH de los ojos, mandibula y lengua al esqueleto de skin.
						for _meshNode in _assetToUse.meshNodesAll where isValidNode _meshNode do 
						(
							_meshNodeParts = FilterString _meshNode.name "_"
							if ( MatchPattern _meshNodeParts[5] pattern: "eye" ) or ( MatchPattern _meshNodeParts[5] pattern: "teethLower" ) or ( MatchPattern _meshNodeParts[5] pattern: "teethUpper" ) or ( MatchPattern _meshNodeParts[5] pattern: "tongue" ) do
							(
								--Hacemos el attach con el polyop , asi se mantienen las id's de los poligonos.
								if (isValidNode _meshNode) and (isValidNode _headRefNode) do polyop.attach _headRefNode _meshNode
								--_headRefNode.baseObject.attach _meshNode _meshNode -- Este metodo jode las id's de materiales.
							)
						)
						
						--Bakeamos la animacion.
						if chbxEnable.state == true then 
						(
							animationRange = interval ((spnOverTimeStart.value-1) as time) (spnOverTimeEnd.value as time)
							--Si esta marcado el checkbox se realiza el bakeo de los frames seleccionados.
							BakeAnimToSkin _assetToUse _startFrame:((spnOverTimeStart.value-1) as time) _endFrame:(spnOverTimeEnd.value as time)
						)
						else 
						(
							--animationRange = interval firstFrame animationRange.end
							BakeAnimToSkin _assetToUse
						)
						--Borramos todos los elementos del asset que no se necesitan.
						delete  _assetToUse.facialNodesAll
						delete _assetToUse.animNodesAll

						for i=1 to _assetToUse.meshNodesAll.count do 
						(
							_foundEP = false 
							if isValidNode _assetToUse.meshNodesAll[i] then 
							(
								--Borramos los modificadores de TurboSmooth y añadimos el edit poly de crowds si no existe
								for j=_assetToUse.meshNodesAll[i].modifiers.count to 1 by -1 do 
								(
									--Limpiamos todos los turbosmooths de las piezas
									--if classOf _assetToUse.meshNodesAll[i].modifiers[j] == TurboSmooth do deleteModifier _assetToUse.meshNodesAll[i] _assetToUse.meshNodesAll[i].modifiers[j]
									--EDIT Borramos todos los modificadores que no sean EDIT Poly 
									if classOf _assetToUse.meshNodesAll[i].modifiers[j] != Edit_Poly do deleteModifier _assetToUse.meshNodesAll[i] _assetToUse.meshNodesAll[i].modifiers[j]
									if (classOf _assetToUse.meshNodesAll[i].modifiers[j] == Edit_Poly) and (_assetToUse.meshNodesAll[i].modifiers[j].name == "Crowd_Edit_Poly") do _foundEP = true
								)
								--Si no encontramos el modificador edit poly de crowds le añadimos uno.
								if not _foundEP do 
								(
									_crowdEditPoly = Edit_Poly()
									_crowdEditPoly.name = "Crowd_Edit_Poly"
									addModifier _assetToUse.meshNodesAll[i] (_crowdEditPoly) before:20
								)
							)
						)

						--Borraremos todos los customAttributes de las piezas de skin y de mesh que queden.
						for _node in (_assetToUse.meshNodesAll + _assetToUse.skinNodesAll) do 
						(
							if isValidNode _node do lb.customAttributes.deleteAttribute _node
						)

						--Volvemos a dejar el assetVisible
						for _node in _assetToUse.meshNodesAll where isValidNode _node do _node.isHidden = false
						for _node in _assetToUse.skinNodesAll where isValidNode _node do _node.isHidden = true
					)
				)
				ResumeEditing()
			)
			else 
			(
				lb.message.show "Select at least one asset"
			)
		)

		------------------------------------------------
		--@fn: undefined | getAssetNodesFromMode | Obtiene los nodos dado el modo de seleccion seleccionado.
		------------------------------------------------			
		fn getAssetNodesFromMode _mode =
		(
			_currSel = getCurrentSelection()
			_nodesToReturn = #()
			case _mode of 
			(
				#selAssets: 
				(
					_assetsToUse = lb.asset.getAssetsFromNodes _currSel
					for _asset in _assetsToUse do 
					(
						for _meshNode in _asset.meshNodesAll do append _nodesToReturn _meshNode
					)
				) 
				#selObjects: 
				(
					for _node in _currSel do 
					(
						_nodeNameType = (FilterString _node.name "_")[3]
						if _nodeNameType == lb.nc.NC_classMesh do append _nodesToReturn _node
					)
				)
				default: _nodesToReturn = #()
			)
			return _nodesToReturn
		)	

		------------------------------------------------
		--@fn: undefined | addCrowdEditPoly | Añade un modificador editPoly a las piezas del asset/seleccionadas con el nombre "Crowd_Edit_Poly" "por debajo de todo." Si la pieza tiene uno no le añade mas.
		--@gets: type | _mode | #selAssets / #selObjects (modos de seleccion.)
		------------------------------------------------
		fn addCrowdEditPoly _mode = 
		(
			_nodeCollection = getAssetNodesFromMode _mode
			_nodesAdded = 0 
			for _node in _nodeCOllection do 
			(
				_foundEP = false 
				for _mod in _node.modifiers do 
				(
					if (classOf _mod == Edit_Poly) and (_mod.name == "Crowd_Edit_Poly") do _foundEP = true
				)
				if not _foundEP do 
				(
					_crowdEditPoly = Edit_Poly()
					_crowdEditPoly.name = "Crowd_Edit_Poly"
					addModifier _node (_crowdEditPoly) before:20
					_nodesAdded += 1
				)
			)
			lb.message.show ("Crowd Edit Poly added on " + _nodesadded as string + " mesh nodes")
			
		)

		------------------------------------------------
		--@fn: undefined | addCrowdEditPoly | Borra el modificador editPoly a las piezas del asset/seleccionadas con el nombre "Crowd_Edit_Poly" "por debajo de todo."
		--@gets: type | _mode | #selAssets / #selObjects (modos de seleccion.)
		------------------------------------------------
		fn removeCrowdEditPoly _mode =
		(
			_nodeCollection = getAssetNodesFromMode _mode
			_nodesRemoved = 0 
			for _node in _nodeCOllection do 
			(
				for _mod in _node.modifiers do 
				(
					if (classOf _mod == Edit_Poly) and (_mod.name == "Crowd_Edit_Poly") do 
					(
						deleteModifier _node _mod
						_nodesRemoved += 1
					)
				)
			)
			lb.message.show ("Crowd Edit Poly removed on " + _nodesRemoved as string + " mesh nodes")
		)

		------------------------------------------------
		--@fn: undefined | toggleCrowdEditPoly | Desactiva/Activa el modificador de editPoly Crowd_Edit_Poly
		--@gets: type | _mode | #selAssets / #selObjects (modos de seleccion.)
		------------------------------------------------
		fn toggleCrowdEditPoly _mode _firstSelNode=
		(
			_nodeCollection = getAssetNodesFromMode _mode

			_state = undefined
			for _mod in _firstSelNode.modifiers do 
			(
				if (classOf _mod == Edit_Poly) and (_mod.name == "Crowd_Edit_Poly") do 
					(
						_state = not _mod.enabledInViews
					)
			)
			--Si la pieza no trae editPoly los apagamos todos.
			if _state == undefined then _state = false
			--print _state
			for _node in _nodeCOllection do 
			(
				for _mod in _node.modifiers do 
				(
					if (classOf _mod == Edit_Poly) and (_mod.name == "Crowd_Edit_Poly") do 
					(
						if _state then 
						(
							_mod.enabledInViews = true
						)
						else 
						(
							_mod.enabled = true
							_mod.enabledInViews = false
						)
					)
				)
			)
		)
		------------------------------------------------
		--@fn: undefined | resize | Redimensiona el UI.
		--@gets: point2 | size | Tamaño nuevo del rollout
		------------------------------------------------
		fn resize size =
		(
			------------------------------------------------------------------------------
			--si la herramienta se redimensiona más pequeña que el mínimo, lo limita al minimo
			if size.x < minRollWidth then (size.x = minRollWidth; rollMainDef.width = size.x)
			if size.y < minRollHeight then (size.y = minRollHeight; rollMainDef.height = size.y)
			------------------------------------------------------------------------------
			
			--calcula el incremento en ancho y alto, respecto al mínimo.
			_increment = [size.x - minRollWidth, size.y - minRollHeight]
			
			------------------------------------------------------------------------------
			--redimension en horizontal
			if _increment.x != 0 then --si hay incremento
			(
				
			)--if
			------------------------------------------------------------------------------
			
			------------------------------------------------------------------------------
			--redimension en vertical
			if _increment.y != 0 then --si hay incremento
			(
				
			)--if
			------------------------------------------------------------------------------
		)

		------------------------------------------------
		--@fn: undefined | saveSettings | Salva los settings de la herramienta en el documento de configuración de la misma.
		------------------------------------------------
		fn saveSettings =
		(
			--almacena posicion
			lb.xml.setAttribute parent.cfgFile ("rollMain/pos") "x" (((getDialogPos rollMainDef).x) as string)
			lb.xml.setAttribute parent.cfgFile ("rollMain/pos") "y" (((getDialogPos rollMainDef).y) as string)
			
			--almacena tamaño
			lb.xml.setAttribute parent.cfgFile ("rollMain/size") "width" (rollMainDef.width as string)
			lb.xml.setAttribute parent.cfgFile ("rollMain/size") "height" (rollMainDef.height as string)
		)
	
		
		------------------------------------------------
		--@fn: undefined | loadSettings | Carga los settings de la herramienta en el documento de configuración de la misma.
		------------------------------------------------
		fn loadSettings =
		(
			_width = (lb.xml.getAttribute parent.cfgFile ("rollMain/size") "width") as integer
			_height = (lb.xml.getAttribute parent.cfgFile ("rollMain/size") "height") as integer
				
			--posicion
			_posX = (lb.xml.getAttribute parent.cfgFile ("rollMain/pos") "x") as integer
			_posY = (lb.xml.getAttribute parent.cfgFile ("rollMain/pos") "y") as integer
				
			--establece minimos
			if _width < minRollWidth then _width = minRollWidth
			if _height < minRollHeight then _height = minRollHeight
			if _posX < 0 then _posX = 0
			if _posY < 0 then _posY = 0
				
			--aplica los valores
			rollMainDef.width = _width
			rollMainDef.height = _height
			setDialogPos rollMainDef [_posX,_posY]
		)
		
		------------------------------------------------------------------------------------------------
		--EVENTS
		------------------------------------------------------------------------------------------------
		

		------------------------------------------------
		--COMMON
		------------------------------------------------

		on spnOverTimeStart changed value do 
		(
			spnoverrideFreezeFrame.value = spnOverTimeStart.value - 1 
		)

		------------------------------------------------
		--@event: resized | Evento que se lanza al cambiar el estado del boton
		--@control: checkbutton | chbxEnable | El elemento que dispara el evento.
		------------------------------------------------
		on chbxEnable changed state do 
		(
			if state == true then
			(
				spnOverTimeStart.enabled = true
				spnOverTimeEnd.enabled = true
				chbfreezeAtZero.enabled = true
				chbfreezeAtZero.checked = true
				spnoverrideFreezeFrame.value = spnOverTimeStart.value - 1 
				spnoverrideFreezeFrame.enabled = true
			)
			else 
			(
				spnOverTimeStart.enabled = false
				spnOverTimeEnd.enabled = false
				chbfreezeAtZero.enabled = false
				chbfreezeAtZero.checked = false
				spnoverrideFreezeFrame.enabled = false
			)
		)

		------------------------------------------------
		--@event: resized | Evento que se lanza al cambiar el estado del boton
		--@control: checkbutton | chkOperateOnSelAssets | El elemento que dispara el evento.
		------------------------------------------------
		on chkOperateOnSelAssets changed state do
		(
			chkOperateOnSelAssets.checked = state
			ckbOperateOnSelection.checked = not state
		)	

		------------------------------------------------
		--@event: resized | Evento que se lanza al cambiar el estado del boton
		--@control: checkbutton | ckbOperateOnSelection | El elemento que dispara el evento.
		------------------------------------------------		
		on ckbOperateOnSelection changed state do
		(
			ckbOperateOnSelection.checked = state
			chkOperateOnSelAssets.checked = not state
		)

		------------------------------------------------
		--@event: resized | Evento que se lanza al cambiar el estado del boton
		--@control: checkbutton | overrideFreezeFrame | El elemento que dispara el evento.
		------------------------------------------------
		on chbfreezeAtZero changed state do 
		(
			spnoverrideFreezeFrame.enabled = state
			if state == false do spnoverrideFreezeFrame.value = spnOverTimeStart.value - 1
		)

		------------------------------------------------
		--@event: pressed | Evento que se lanza al pulsar
		--@control: button | addCrowdEP | El elemento que dispara el evento.
		------------------------------------------------
		on addCrowdEP pressed do 
		(
			_currSel = getCurrentSelection()
			if _currSel.count > 0 then 
			(
				if ckbOperateOnSelection.checked then addCrowdEditPoly #selObjects
				else addCrowdEditPoly #selAssets
			)else lb.message.show "You have to select any element to process this operation"
		)

		-----------------------------------------------
		--@event: pressed | Evento que se lanza al pulsar
		--@control: button | deleteCrowdEP | El elemento que dispara el evento.
		------------------------------------------------
		on deleteCrowdEP pressed do 
		(
			_currSel = getCurrentSelection()
			if _currSel.count > 0 then 
			(
				if ckbOperateOnSelection.checked then removeCrowdEditPoly #selObjects
				else removeCrowdEditPoly #selAssets
			)else lb.message.show "You have to select any element to process this operation"
		)

		------------------------------------------------
		--@event: pressed | Evento que se lanza al pulsar
		--@control: button | toggleCrowdEP | El elemento que dispara el evento.
		------------------------------------------------		
		on toggleCrowdEP pressed do 
		(
			_currSel = getCurrentSelection()
			if _currSel.count > 0 then 
			(
				if ckbOperateOnSelection.checked then toggleCrowdEditPoly #selObjects _currsel[1]
				else toggleCrowdEditPoly #selAssets _currsel[1]
			)else lb.message.show "You have to select any element to process this operation"
		)

		------------------------------------------------
		--@event: pressed | Evento que se lanza al pulsar
		--@control: button | btnPreOperation | El elemento que dispara el evento.
		------------------------------------------------
		on btnPreOperation pressed do 
		(
			simplifySkinRig()
		)

		------------------------------------------------
		--@event: pressed | Evento que se lanza al pulsar
		--@control: button | btnExport | El elemento que dispara el evento.
		------------------------------------------------
		on btnExport pressed do 
		(
			--config de fbx

			_sceneAssets = lb.asset.getSceneAssets()

			_backupNamesAarray = #()
			for i = 1 to _sceneAssets.count do 
			(
				_assetFullName = (_sceneAssets[i].fullname)	

				_backupAsset = #()
				for j = 1 to  _sceneAssets[i].meshNodesAll.count do 
				(
					append _backupAsset _sceneAssets[i].meshNodesAll[j].name
					_nameParts = FilterString _sceneAssets[i].meshNodesAll[j].name "_"
					_nodeSimpleName = _nameParts[2] + "_" + _nameParts[5]
					_sceneAssets[i].meshNodesAll[j].name = _nodeSimpleName
				)

				append _backupNamesAarray _backupAsset
			
				_assetfilename = undefined
				for _element in _assetNodeInfos do 
				(
					if _element[1] == _assetFullName do _assetfilename = (_element[2]+ "rig\\crowds\\")
				)

				_assetPath = getSaveFileName "Save fbx file" types:"Archivo FBX (*.fbx)|*.fbx|Todos los formatos (*.*)|*.*|" filename: _assetfilename
				select _sceneAssets[i].nodes
				if _assetPath != undefined do 
				(
					print _assetPath
					_theClasses = exporterPlugin.classes
					FBXExporterSetParam  "ShowWarnings" false 
					FBXExporterSetParam  "BakeAnimation" true 
					FBXExporterSetParam  "BakeFrameStart" (animationRange.start as integer )
					FBXExporterSetParam  "BakeFrameEnd" (animationRange.end as integer )
					exportFile _assetPath #noPrompt selectedOnly:true  using:_theClasses[8]  
				)
			)

			-----------
			--EL EXPORTADO VA AQUI
			-----------

			for i = 1 to _sceneAssets.count do 
			(
				_backupAsset = #()
				for j = 1 to  _sceneAssets[i].meshNodesAll.count do 
				(
					_sceneAssets[i].meshNodesAll[j].name = _backupNamesAarray[i][j]
				)
			)
		)
		
		------------------------------------------------
		--@event: resized | Evento que se lanza al redimensionar el rollout.
		--@control: rollout | rollMain | El elemento que sufre la redimensión. El rollout principal de la herramienta.
		--@gets: point2 | size | tamaño al que se ha redimensionado el rollout
		------------------------------------------------
		on rollMainDef resized size do
		(
			resize size
		)
		
		------------------------------------------------
		--@event: open | Evento que se lanza al abrir el rollout.
		--@control: rollout | rollMain | El elemento que se abre. El rollout principal de la herramienta.
		------------------------------------------------
		on rollMainDef open do
		(
			loadSettings()
			createSceneEvents() --crea los callbacks
			if parent.rollMain != undefined then resize [parent.rollMain.width, parent.rollMain.height]
			updateSceneAnimRange()
			_assetNodeInfos = getSceneAssetsPaths()
		)
		
		------------------------------------------------
		--@event: close | Evento que se lanza al cerrar el rollout.
		--@control: rollout | rollMain | El elemento que se cierra. El rollout principal de la herramienta.
		------------------------------------------------
		on rollMainDef close do
		(
			removeSceneEvents() --elimina los callbacks
			saveSettings()
			
			parent.opened = false --indica que la herramienta está cerrada.
			updateToolbarButtons()
		)
	)--rollMainDef
	
	------------------------------------------------------------------------------------------------------------------------------------------------
	--@struct: templateTool | Contiene la herramienta plantilla.
	------------------------------------------------------------------------------------------------------------------------------------------------
	struct tl_rigFBXExporter
	(
		------------------------------------------------------------------------------------------------
		--COMMON
		------------------------------------------------------------------------------------------------
		
		def = (classof this),				--@var: def | Almacena la definicion del struct.
		defFile = getThisScriptFilename(),	--@var: defFile | Almacena la ruta del propio archivo de script que contiene la definicion.
		
		category = #main,					--@var: category | Categoria de la tool.
		className = lb.getFileToolName (getThisScriptFilename() as string),	--@var: className | Nombre de la tool.
		description = "Tool plantilla",		--@var: description | Descripcion de la tool.
		
		cfgFile = (lb.config.getToolsIniPath()) + (lb.getFileToolName (getThisScriptFilename() as string)) + ".cfg",	--@var: cfgFile | Archivo de configuracion de la tool.
			
		opened = false,			--@var: opened | Indica si la herramienta está abierta.
			
		------------------------------------------------------------------------------------------------
		--VARIABLES
		------------------------------------------------------------------------------------------------
			
		------------------------------------------------------------------------------------------------
		--LIBRARIES
		------------------------------------------------------------------------------------------------
		
		------------------------------------------------------------------------------------------------
		--ROLLOUTS
		------------------------------------------------------------------------------------------------
		
		rollMain = rollMainDef,	--@var: rollMain | Almacena el rollout principal de la herramienta.
			
		------------------------------------------------------------------------------------------------
		--FUNCTIONS
		------------------------------------------------------------------------------------------------
			
		------------------------------------------------
		--GETS
		------------------------------------------------
		
		------------------------------------------------
		--SETS
		------------------------------------------------
		
		------------------------------------------------
		--OTHER
		------------------------------------------------
		
		------------------------------------------------
		--COMMON
		------------------------------------------------
		
		------------------------------------------------
		--@fn: boolean | isOpen | Devuelve información true o false, si la herramienta está abierta o cerrada.
		------------------------------------------------
		fn isOpen =
		(
			this.opened
		),
		
		------------------------------------------------
		--@fn: undefined | refreshInterface | Refresca el interface inicial de la herramienta
		------------------------------------------------
		fn refreshInterface =
		(
			--refresca el interface de la herramienta
		),
		
		------------------------------------------------
		--@fn: undefined | createInterface | Crea el interface inicial de la herramienta
		------------------------------------------------
		fn createInterface =
		(
			--crea el interface, lo redimensiona y lo reposiciona
			createDialog this.rollMain lockwidth:true lockheight:true pos:[-10000,0] style:#(#style_toolwindow, #style_titlebar, #style_sysmenu, #style_resizing)
		),
		
		------------------------------------------------
		--@fn: undefined | destroyInterface | Destruye el interface de la herramienta.
		------------------------------------------------
		fn destroyInterface =
		(
			destroyDialog this.rollMain --cierra la herramienta.			
		),--destroyInterface
		
		------------------------------------------------
		--@fn: undefined | run | Lanza la herramienta.
		------------------------------------------------
		fn run =
		(
			this.createInterface() --crea el interface.
			this.opened = true --indica que la herramienta está abierta
		),--execute
		
		------------------------------------------------
		--@fn: undefined | close | Cierra la herramienta.
		------------------------------------------------
		fn close =
		(
			this.destroyInterface() --destruye el interface.
			this.opened = false --indica que la herramienta está cerrada.
		),
		
		------------------------------------------------
		--@fn: undefined | initSubLibraries | Inicializa todas las sublibrerías en el orden establecido.
		------------------------------------------------
		fn initSubLibraries =
		(
			_subLibraries = #()
			
			for sl in _subLibraries do sl.init()
		),
		
		------------------------------------------------
		--@fn: undefined | init | Inicializa la librería.
		------------------------------------------------
		fn init =
		(		
			this.initSubLibraries() --inicialza las librerías hijas
		),		
		
		------------------------------------------------------------------------------------------------
		--EVENTS
		------------------------------------------------------------------------------------------------
		
		------------------------------------------------
		--@event: create | Ejecución al crearse la instancia del struct.
		------------------------------------------------
		on create do
		(
			lb.addTool this --añade la tool a la libreria principal	
		)		
		
	)--tl_rigFBXExporter
	
	------------------------------------------------------------------------------------------------------------------------------------------------
	--EXECUTION
	------------------------------------------------------------------------------------------------------------------------------------------------	
	
	tl_rigFBXExporter() --crea la herramienta
)