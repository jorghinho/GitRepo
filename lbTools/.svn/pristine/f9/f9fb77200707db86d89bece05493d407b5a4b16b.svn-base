------------------------------------------------------------------------------------------------------------------------------------------------
--Descripcion: Herramienta Plantilla.
------------------------------------------------------------------------------------------------------------------------------------------------
(
	------------------------------------------------------------------------------------------------------------------------------------------------
	--@rollout: rollMain | Contiene la herramienta plantilla.
	------------------------------------------------------------------------------------------------------------------------------------------------
	rollout rollMainDef "Audio Exporter Test"
	(
		------------------------------------------------------------------------------------------------
		--COMMON
		------------------------------------------------------------------------------------------------
		
		local parent = lb.getTool (lb.getFileToolName (getThisScriptFilename() as string)) --@var : parent | Herramienta o rolllout del que depende y/o contiene el rollout actual
		
		local minRollWidth = 400		--@var: minRollWidth | Ancho mínimo de la herramienta.
		local minRollHeight = 510		--@var: minRollHeight | Alto mínimo de la herramienta.
		local selectionBackcolor = (dotnetclass "System.Drawing.Color").transparent
		local selectionForecolor = (dotnetclass "System.Drawing.Color").black

		------------------------------------------------------------------------------------------------
		--VARIABLES
		------------------------------------------------------------------------------------------------
		local soxPath = lb.config.getExePath() + "sox.exe"
		local premiereParserPath = lb.config.getExePath() + "premiereParser.exe" 
		local audioClips = #()
		local videoClips = #()
		local errorMessages = #()

		local fps = 24.0
		------------------------------------------------------------------------------------------------
		--CONTROLS
		------------------------------------------------------------------------------------------------
		
		--@control | controlName | Plantilla de comentario para controles
		label lblFile "Premiere file:" pos:[5,10]
		edittext edtFilename pos:[1,25] width:330 enabled:false
		button btnPick "Browse" pos:[335,24] width:60 height:20
		--dotNetControl lvAudios "System.Windows.Forms.listview" pos:[5,50] width:390 height:400
		dotNetControl dgAudios "System.Windows.Forms.DataGridView" pos:[5,50] width:390 height:400
		button btnExport "Export audios" pos:[5,460] width:390 height:40 enabled:false
		
		------------------------------------------------------------------------------------------------
		--FUNCTIONS
		------------------------------------------------------------------------------------------------
		
		------------------------------------------------
		--GETS
		------------------------------------------------
		
		------------------------------------------------
		--SETS
		------------------------------------------------
		
		------------------------------------------------
		--OTHER
		------------------------------------------------
		
		------------------------------------------------
		--COMMON
		------------------------------------------------
		
		------------------------------------------------
		--@fn: undefined | createSceneEvents | Crea los callbacks relacionados con el rollout
		------------------------------------------------
		fn createSceneEvents =
		(
		
		)
		
		------------------------------------------------
		--@fn: undefined | removeSceneEvents | Destruye los callbacks relacionados con el rollout
		------------------------------------------------
		fn removeSceneEvents =
		(
		
		)
		
		------------------------------------------------
		--@fn: undefined | resize | Redimensiona el UI.
		--@gets: point2 | size | Tamaño nuevo del rollout
		------------------------------------------------
		fn resize size =
		(
			------------------------------------------------------------------------------
			--si la herramienta se redimensiona más pequeña que el mínimo, lo limita al minimo
			if size.x < minRollWidth then (size.x = minRollWidth; rollMainDef.width = size.x)
			if size.y < minRollHeight then (size.y = minRollHeight; rollMainDef.height = size.y)
			------------------------------------------------------------------------------
			
			--calcula el incremento en ancho y alto, respecto al mínimo.
			_increment = [size.x - minRollWidth, size.y - minRollHeight]

			------------------------------------------------------------------------------
			--redimension en horizontal
			if _increment.x != 0 then --si hay incremento
			(
				dgAudios.width = size.x - 10
				btnExport.pos.x = 5 + (_increment.x/2.0)
				btnPick.pos.x = 335 + _increment.x
				edtFilename.width = 326 + _increment.x
			)--if
			------------------------------------------------------------------------------
			
			------------------------------------------------------------------------------
			--redimension en vertical
			if _increment.y != 0 then --si hay incremento
			(
				btnExport.pos.y = 460 + _increment.y
				dgAudios.height = 400 + _increment.y
			)--if
			------------------------------------------------------------------------------
		)

		------------------------------------------------
		--@fn: undefined | saveSettings | Salva los settings de la herramienta en el documento de configuración de la misma.
		------------------------------------------------
		fn saveSettings =
		(
			--almacena posicion
			lb.xml.setAttribute parent.cfgFile ("rollMain/pos") "x" (((getDialogPos rollMainDef).x) as string)
			lb.xml.setAttribute parent.cfgFile ("rollMain/pos") "y" (((getDialogPos rollMainDef).y) as string)
			
			--almacena tamaño
			lb.xml.setAttribute parent.cfgFile ("rollMain/size") "width" (rollMainDef.width as string)
			lb.xml.setAttribute parent.cfgFile ("rollMain/size") "height" (rollMainDef.height as string)
		)
		
		------------------------------------------------
		--@fn: undefined | loadSettings | Carga los settings de la herramienta en el documento de configuración de la misma.
		------------------------------------------------
		fn loadSettings =
		(
			_width = (lb.xml.getAttribute parent.cfgFile ("rollMain/size") "width") as integer
			_height = (lb.xml.getAttribute parent.cfgFile ("rollMain/size") "height") as integer
				
			--posicion
			_posX = (lb.xml.getAttribute parent.cfgFile ("rollMain/pos") "x") as integer
			_posY = (lb.xml.getAttribute parent.cfgFile ("rollMain/pos") "y") as integer
				
			--establece minimos
			if _width < minRollWidth then _width = minRollWidth
			if _height < minRollHeight then _height = minRollHeight
			if _posX < 0 then _posX = 0
			if _posY < 0 then _posY = 0
				
			--aplica los valores
			rollMainDef.width = _width
			rollMainDef.height = _height
			setDialogPos rollMainDef [_posX,_posY]
		)
		
		
		fn initDataGridView =
		(
			dgAudios.allowUsertoaddRows = false -- No dejamos agregar columnas
			dgAudios.allowUserToResizeRows = false -- No dejamos escalar filas
			dgAudios.allowUserToResizeColumns = false -- No dejamos escalar columnas
			dgAudios.AllowUserToOrderColumns = false 	-- No dejamos ordenar columnas
			dgAudios.columnHeadersHeightSizeMode = (dotNetClass "System.Windows.Forms.dataGridViewColumnHeadersHeightSizeMode").disableResizing -- Ni idea
			dgAudios.AdvancedColumnHeadersBorderStyle.all = (dotnetclass "System.Windows.Forms.DataGridViewAdvancedCellBorderStyle").outset -- Borde de las cabeceras de columnas

			dgAudios.columnHeadersVisible = true									--Para que las columnas tengan titulo
			dgAudios.rowheadersvisible = false									--Para que las filas no tengan titulo
			
			dgAudios.foreColor = (dotNetClass "System.Drawing.Color").black		--Color negro para las fuentes
			
			dgAudios.font = dotnetobject "system.drawing.font" (dotnetobject "System.Drawing.FontFamily" "Arial") 7.5	--Tipo de fuente
			
			dgAudios.readonly = false 					--No modificable
			dgAudios.multiSelect = false				--Sin multiselección
			dgAudios.showCellTooltips = false			--Mostrar tooltips de las celdas
			dgAudios.selectionMode = undefined --(dotnetClass "System.Windows.Forms.DataGridViewSelectionMode").fullRowSelect	--Selección de fila completa

			_rowStyle = (dotnetObject "System.Windows.Forms.DataGridViewCellStyle")
			_rowStyle.selectionBackcolor = selectionBackcolor
			_rowStyle.selectionForecolor = selectionForecolor
			dgAudios.rowsDefaultCellStyle = _rowStyle
		)
		
		
		fn fillAudioDataGridView _audioclips=
		(	
			--Limpiamos las columnas
			dgAudios.columns.clear()

			--Creamos las columnas
			_column = (dotnetobject "System.Windows.Forms.DataGridViewTextBoxColumn")
			_column.width = 40
			_column.readOnly = true
			_column.sortmode = (dotnetclass "System.Windows.Forms.DataGridViewColumnSortMode").notSortable
			_column.HeaderText = "Loc"
			dgAudios.columns.add _column
			
			_column = (dotnetobject "System.Windows.Forms.DataGridViewTextBoxColumn")
			_column.width = 40
			_column.readOnly = true
			_column.sortmode = (dotnetclass "System.Windows.Forms.DataGridViewColumnSortMode").notSortable
			_column.HeaderText = "Cam"
			dgAudios.columns.add _column

			_chars = #()
			_sortedAudPrClips = #()

			--Función de comparación de cámaras para qsort
			_qsortFn = ( fn compareClips c1 c2 = 
			(
				if (c1[1].cam As Number) > (c2[1].cam As Number) then
					1
				else if (c1[1].cam As Number) < (c2[1].cam As Number) then 
					-1
				else
					0
			))

			for c in _audioClips do
			(
				--Agregamos un personaje a cada columna
				if findItem _chars c.char == 0 do
				(
					_column = (dotnetobject "System.Windows.Forms.DataGridViewCheckBoxColumn")
					_column.readOnly = false
					_column.width = 60 --c.char.count * 7.5
					_column.sortmode = (dotnetclass "System.Windows.Forms.DataGridViewColumnSortMode").notSortable
					_column.HeaderText = c.char
					dgAudios.columns.add _column
					append _chars c.char
				)
				--print c

				--Organizamos los audioClips en un array de arrays que va por localización y luego por número de cámara
				_added = false
				_locationFound = false
				for i=1 to _sortedAudPrClips.count where not _added do
				(
					for j=1 to _sortedAudPrClips[i].count where not _added do
					(
						--print ("Current location: " + _sortedAudPrClips[i][j][1].location + " == " + c.location) 
						if _sortedAudPrClips[i][j][1].location == c.location then
						(
							--print ("Current camera: " + _sortedAudPrClips[i][j][1].cam + " == " + c.cam) 
							_locationFound = true
							if _sortedAudPrClips[i][j][1].cam == c.cam then
							(
								--print "Added!"
								append _sortedAudPrClips[i][j] c
								_added = true
							)
						)
					)
					if _locationFound and not _added then
					(
						--print "No hay cámara"
						append _sortedAudPrClips[i] #(c)
						qsort _sortedAudPrClips[i] _qsortFn
						_added = true
					)
					--print "-----------------------------------------------"
				)
				if not _locationFound do
				(
					append _sortedAudPrClips #(#(c))
				)
			)

			--print _sortedAudPrClips.count
			--global ojete = _sortedAudPrClips
			for _location in _sortedAudPrClips do
			(
				--print "--Location"
				--print _location.count
				for _cam in _location do
				(
					--print "----Cam"
					_row = (dotNetObject "System.Windows.Forms.DataGridViewRow")
					_row.height = 25
					dgAudios.rows.add _row
					_row.cells.item[0].value = _cam[1].location
					_row.cells.item[1].value = _cam[1].cam
					_addedChars = #()
					for _clip in _cam do
					(
						--print _clip
						_found = false
						for i=1 to _chars.count  do
						(
							if _clip.char == _chars[i] then
							(
								append _addedChars _clip.char
								
								_style = (dotNetObject "System.Windows.Forms.DataGridViewCellStyle")
								_style.backColor = (dotnetClass "System.Drawing.Color").palegreen --JAJAJAJ Pale cream
								_row.cells.item[i+1].style = _style
								_row.cells.item[i+1].value = true
								_found = true
							)
						)
						if not _found then
						(
							_row.cells.item[i+1].value = false
						)
					)
				)
			)

			for i=0 to (dgAudios.rows.count - 1) do
			(
				for j=2 to (dgAudios.rows.item[i].cells.count - 1) do
				(
					_style = (dotNetObject "System.Windows.Forms.DataGridViewCellStyle")
					if dgAudios.rows.item[i].cells.item[j].value != undefined then
					(
						dgAudios.rows.item[i].cells.item[j].readOnly = false
					)
					else
					(
						dgAudios.rows.item[i].cells.item[j].readOnly = true
						dgAudios.rows.item[i].cells.item[j].FlatStyle = (dotNetClass "System.Windows.Forms.FlatStyle").Flat
						_style = (dotNetObject "System.Windows.Forms.DataGridViewCellStyle")
						_style.backColor = (dotnetClass "System.Drawing.Color").FromArgb 255 102 102 
						_style.foreColor = (dotnetClass "System.Drawing.Color").darkGray
						dgAudios.rows.item[i].cells.item[j].style = _style
					)
				)
			)
		)


		fn fillVideoClipsFromXml xml =
		(
			struct prVideoClipInfo (sequence, location, cam, char, duration, trimIn, trimOut, speed, file, silence, start, end)
			_videoClips = #()
			_sortedVidPrClips = #()
			
			xmlDoc = lb.xml.newXmlDoc()
			xmlDoc.setString(xml)
			root = xmlDoc.root
			
			sequence = (root.getNodes "sequence")[1]
			for location in (root.getNodes "sequence/location") do
			(
				for c in (location.getNodes "clip") do
				(
					for v in c.getNodes "video" do
					(
						--print (classof (a.getProperty("start")))
						--print (a.getProperty("start"))
						clip = prVideoClipInfo sequence:(sequence.getProperty("name")) location:(location.getProperty("name")) cam:(c.getProperty("cam")) char:(v.getProperty("charname")) trimIn:(v.getProperty("trimIn") As Number) trimOut:(v.getProperty("trimOut") As Number) speed:(v.getProperty("speed")) duration:(v.getProperty("length") As Number) file:(v.getProperty("path") + "\\" + v.getProperty("filename")) start:(v.getProperty("start") As Number) end:(v.getProperty("end") As Number) 
						append _videoClips clip
					)
				)
			)

			for error in (root.getNodes "error") do
			(
				append errorMessages error



			)

			_qsortFnClips = ( fn compareClips c1 c2 = 
			(
				if (c1[1].cam As Number) > (c2[1].cam As Number) then
					1
				else if (c1[1].cam As Number) < (c2[1].cam As Number) then 
					-1
				else
					0
			))
			
			for c in _videoClips do
			(
				--Agregamos las columnas de rangos
				--Organizamos los _videoClips en un array de arrays que va por localización y luego por posicion en la secuencia
				
				_added = false
				_locationFound = false
				for i=1 to _sortedVidPrClips.count do -- where not _added do
				(
					for j=1 to _sortedVidPrClips[i].count do -- where not _added do
					(
						--print ("Current location: " + _sortedVidPrClips[i][j][1].location + " == " + c.location) 
						if _sortedVidPrClips[i][j][1].location == c.location then
						(
							--print ("Current camera: " + _sortedVidPrClips[i][j][1].cam + " == " + c.cam) 
							_locationFound = true
							if _sortedVidPrClips[i][j][1].cam == c.cam then
							(
								--print "Added!"
								append _sortedVidPrClips[i][j] c
								_added = true
							)
						)
					)
					
					if _locationFound then   -- and not _added
					(
						--print "No hay cámara"
						append _sortedVidPrClips[i] #(c)
						qsort _sortedVidPrClips[i] _qsortFnClips
						_added = true
					)
					--print "-----------------------------------------------"
					
				)
				
				if not _locationFound do
				(
					append _sortedVidPrClips #(#(c))
				)
					
				
			)
		
			_sortedVidPrClips	
		)
	
		fn fillAudioClipsFromXml xml =
		(
			struct audioClipInfo (sequence, location, cam, char, duration, trimIn, speed, file, silence, start)
			_audioClips = #()
			
			xmlDoc = lb.xml.newXmlDoc()
			xmlDoc.setString(xml)
			root = xmlDoc.root
			
			sequence = (root.getNodes "sequence")[1]
			for location in (root.getNodes "sequence/location") do
			(
				for c in (location.getNodes "clip") do
				(
					for a in c.getNodes "audio" do
					(
						--print (classof (a.getProperty("start")))
						--print (a.getProperty("start"))
						clip = audioClipInfo sequence:(sequence.getProperty("name")) location:(location.getProperty("name")) cam:(c.getProperty("cam")) char:(a.getProperty("charname")) trimIn:(a.getProperty("trimIn") As Number) speed:(a.getProperty("speed")) duration:(a.getProperty("length") As Number) file:(a.getProperty("path") + "\\" + a.getProperty("filename")) silence: (a.getProperty("silence") As Number) start:(a.getProperty("start") As Number)
						append _audioClips clip
					)
				)
			)

			_audioClips

			--_sortedVidPrClips = #()
			--for c in audioClips do
			--(
			--	--Lo situamos por tipo
			--	for i=1 to _sortedVidPrClips.count do
			--	(
					
			--	)
			--)

			
		)

		fn systemCall command =
		(
			setWaitCursor() 
			oldClipboard = getclipboardText()
			if oldClipboard == undefined do oldClipboard = ""
			oldCurrentDir = sysInfo.currentDir
			sysInfo.currentDir = lb.config.getExePath()
			HiddenDOSCommand (command + " 2>&1 | clip")
			clip = getclipboardText()
			setclipboardText(oldClipboard)
			sysInfo.currentDir = oldCurrentDir
			setArrowCursor() 
			clip
		)


		fn processAudio location camera character =
		(
 			print "Llego a processAudio:"
 			print ("Location: " + location As String) 
 			print ("Camera: " + camera As String) 
 			print ("Character: " + character As String) 

			_audioClipsToProcess = #()
			for _audClip in audioClips do
			(
				
				if _audClip.location == location and _audClip.cam == camera and _audClip.char == character then
				(
					format "procesando Clip: % \n" _audClip.cam
					append _audioClipsToProcess _audClip
					clipVideoPath="y:/sequence/movie/seq_" + _audClip.sequence + "(" + _audClip.location + ")/cam/cam" + _audClip.cam +"/video/seq_" + _audClip.sequence + "(" + _audClip.location + ")_cam" + _audClip.cam + "_layout.mov" 
					clipVideoInfo = lb.video.getVideoInfo  clipVideoPath
					format "movInfo: %  -- dur: % \n"  clipVideoInfo.file (clipVideoInfo.recEnd - clipVideoInfo.recStart+1 ) 
					format "% % % % ->% (%) [%-%] - %\n" _audClip.sequence _audClip.location _audClip.cam _audClip.Char _audClip.trimIn _audClip.silence _audClip.start (_audClip.start+_audClip.duration-1) _audClip.file
				)
			)



			_clipSortfn = (fn compareClips c1 c2 =
			(
				if c1.start > c2.start then
					1
				else if c1.start < c2.start then
					-1
				else
					0
			))

			qsort _audioClipsToProcess _clipSortfn
			--print _audioClipsToProcess.count
			_log = ""
			_audiosToMerge = #()
			_audioCounter = 1


		


			_audioVideoClipsToProcess = #()

			-- para cada clip de cámara
			for _audClip in _audioClipsToProcess do
			(

				format "-----------------\n"
				format "% % % % - AudtrimIn:% - Sil:% - Rango: [%-%] - %\n" _audClip.sequence _audClip.location _audClip.cam _audClip.Char _audClip.trimIn _audClip.silence _audClip.start (_audClip.start+_audClip.duration-1) _audClip.file
				format "-----------------\n"
				for _vClips in videoClips do
				(
					--format "% -- %\n" _vClips.count _vClips
					
					for _v in _vClips do
					(
						
						
						if _audClip.sequence == _v[1].sequence and _audClip.location == _v[1].location and _audClip.cam == _v[1].cam 	then   --	and _audClip.start >= _v[1].start  and (_audClip.start+_audClip.duration-1) <=_v[1].end 
						(
							_vInfo=lb.video.getVideoInfo _v[1].file

							append _audioVideoClipsToProcess #(_audClip, _v[1])

							if _audClip.start < _v[1].start then _audClip.start = _v[1].start

							format "% -- VidRangoPremiere:[%-%] --> % [%] <-- % \n" _v[1].cam _v[1].start _v[1].end _v[1].trimIn _vInfo.duration _v[1].TrimOut
							format "[V].sequence: % -- [A].sequence: %\n" _v[1].sequence _audClip.sequence
							format "[V].location: % -- [A].location: %\n" _v[1].location _audClip.location
 							format "[V].cam:      % -- [A].cam:      %\n" _v[1].cam _audClip.cam
						)
					)
				)

			)


			-- cada audio se rellena por el inicio con silencio hasta el inicio del VIDEO (no del corte del video en premiere)
			-- Luego, se MEZCLAN y así los de animacion siempre tienen el audio sincronizado con el inicio del video

			for _audioVideoClip in _audioVideoClipsToProcess do
			(

				_audClip=_audioVideoClip[1]
				_vidClip=_audioVideoClip[2]
				if doesFileExist _audClip.file then
				(
					--Aumentar velocidad
					_comando = "\"" + soxPath + "\" \"" + _audClip.file + "\"  -c 1 -r 48000 -b 16 \"" + (GetDir #sound) + "\\_tempSpeed.wav\" speed " + (_audClip.speed As String) 
					format "Comando Vel.:\n %\n\n" _comando
					_output = systemCall (_comando)

					format "output Vel:\n%\n\n " _output
					
					if _output != "" then _log += _output + "\n"
					--Trim , recorta el audio por el inicio hasta el corte en el montaje
					_comando = "\"" + soxPath + "\" \"" + (GetDir #sound) + "\\_tempSpeed.wav\" \"" +  (GetDir #sound) + "\\_tempTrim.wav\" trim " + (((_audClip.trimIn*1.0) / fps) As String) + " " + (((_audClip.duration*1.0) / fps) As String)
					format "Comando Trim:\n %\n\n" _comando
					_output = systemCall (_comando)
					format "output Trim:\n%\n\n " _output

					if _output != "" then _log += _output + "\n"
					--Crear silencio , para añadir el silencio antes del audio, rellenado hasta el corte de video. Para que coja todo el video desde el inicio, hay que añadir el trim de video
					_silencioTotal =  _audClip.start - _vidClip.start + _vidClip.trimIn     --  _audClip.silence + _vidClip.trimIn
					_comando = "\"" + soxPath + "\" -n -r 48000 -c 1 -b 16 \"" + (GetDir #sound) + "\\_tempSilence.wav\" trim 0.0 " + (((_silencioTotal * 1.0) / fps) As String)
					format "Comando Sil.:\n %\n\n" _comando
					_output = systemCall (_comando)
					format "output Sil:\n%\n\n " _output

					if _output != "" then _log += _output + "\n"
					--Merge
					_comando = "\"" + soxPath + "\" \"" + (GetDir #sound) + "\\_tempSilence.wav\" \"" + (GetDir #sound) + "\\_tempTrim.wav\" \"" + (GetDir #sound) + "\\_char" + (formattedPrint _audioCounter format:"03d") + ".wav\""
					format "Com. Concat: \n%\n\n" _comando

					_output = systemCall (_comando)
					format "output concat:\n%\n\n " _output

					if _output != "" then _log += _output + "\n"

					--Borramos temporales
					deleteFile((GetDir #sound) + "\\_tempSpeed.wav")
					deleteFile((GetDir #sound) + "\\_tempSilence.wav")
					deleteFile((GetDir #sound) + "\\_tempTrim.wav")

					--Apilar ruta del archivo
					append _audiosToMerge ((GetDir #sound) + "\\_char" + (formattedPrint _audioCounter format:"03d") + ".wav")
					_audioCounter += 1
				)
				else
				(
					_log += "Sound file <" + _audClip.file + "> not found, skipped.\n"
					--print _log
				)
			)
 			


 			if _audiosToMerge.count > 1 then
 			(
				_mergeCommand = "\"" + soxPath + "\" -m"
				for _audioToMerge in _audiosToMerge do
				(
					_mergeCommand += " \"" + _audioToMerge + "\""
				)
				

				_outputPath = "y:\\sequence\\movie\\seq_" + _audioClipsToProcess[1].sequence + "(" + _audioClipsToProcess[1].location + ")\\cam\\cam" + _audioClipsToProcess[1].cam + "\\sound\\seq_" + _audioClipsToProcess[1].sequence + "_cam" + _audioClipsToProcess[1].cam + "_dub_" + _audioClipsToProcess[1].char + ".wav"		
				
				format "MERGE COMMAND\n--------\n %\nOUTPUT PATH\n------------\n%\n\n" _mergeCommand _outputPath

				--usar comando DOS para borrar el fichero. deleteFile no funciona
				if doesFileExist _outputPath do HiddenDOSCommand ("del /F " + _outputPath)

				makeDir (getFilenamePath _outputPath) all:true
				_mergeCommand += " \"" + _outputPath + "\""

				format "mergeCommand: %\n" _mergeCommand

				_output = (systemCall _mergeCommand)
				if _output != "" then _log += _output + "\n"

			)
			else if _audiosToMerge.count == 1 then
			(
				_outputPath = "y:\\sequence\\movie\\seq_" + _audioClipsToProcess[1].sequence + "(" + _audioClipsToProcess[1].location + ")\\cam\\cam" + _audioClipsToProcess[1].cam + "\\sound\\seq_" + _audioClipsToProcess[1].sequence + "_cam" + _audioClipsToProcess[1].cam + "_dub_" + _audioClipsToProcess[1].char + ".wav"
				
				--usar comando DOS para borrar el fichero. deleteFile no funciona
				if doesFileExist _outputPath do HiddenDOSCommand ("del /F " + _outputPath)
				
				makeDir (getFilenamePath _outputPath) all:true
				
				format "% -m % %\n" soxPath _audiosToMerge[1] _outputPath
				_comando = "\"" + soxPath + "\" \"" + _audiosToMerge[1] + "\" \"" + _outputPath + "\""

				format "Merge UN SOLO audio\n-----------\n%\n\n" _comando
				_output = (systemCall (_comando))   -- (systemCall ("\"" + soxPath + "\" \"" + _audiosToMerge[1] + "\" \"" + _outputPath + "\""))
				if _output != "" then
					_log += _output + "\n"
			)

			--Borramos los ficheros
			for _deleteMe in _audiosToMerge do
			(
				deleteFile _deleteMe
			)

			_log
		)

		

		
		------------------------------------------------------------------------------------------------
		--EVENTS
		------------------------------------------------------------------------------------------------
		on btnPick pressed do
		(
			premiere_file = getOpenFileName "Open premiere file" filename:"Y:\\sequence\\movie\\" types:"Premiere(*.prproj)"
			--premiere_file = "Y:\\sequence\\movie\\seq_060b-order\\video\\edit\\seq_060b-order_edit.prproj"
			if premiere_file != undefined then
			(
 				--if not lb.svn.svnIsFileUpdated premiere_file timeout:10 then
 				--(
 				--	_dp = (GetDialogPos lb.audioExporter.rollMain)
 				--	lb.message.show "Premiere file is not updated" type:#message size:[300,75] pos:[_dp.x+(lb.audioExporter.rollMain.width/2.0)-150,_dp.y+(lb.audioExporter.rollMain.height/2.0)-37.5] modal:true
 				--) 
 				--else
 				--(
				edtFilename.text = premiere_file
				encodeCommand = "\"" + premiereParserPath + "\" " + premiere_file
				
				xml = systemCall(encodeCommand)
				print "XML:"
				--while not eof(xml) do print readline xml
				 print xml
				
				audioClips = fillAudioClipsFromXml(xml)	
				
				--for a in audioClips do print a
				videoClips = fillVideoClipsFromXml(xml)	
				--for v in videoClips do print v

				fillAudioDataGridView audioClips
				
				btnExport.enabled = true

				for _m in errorMessages do print _m
 				--)
			)
		)
		
		on btnExport pressed do
		(
			_log = ""
			_selectedChars = #()

			--Recorremos la visualización para ver que audios nos ha indicado el usuario
			for i=0 to dgAudios.rows.count-1 do
			(
				_location = dgAudios.rows.item[i].cells.item[0].Value
				_cam = dgAudios.rows.item[i].cells.item[1].Value
				for j=2 to dgAudios.rows.item[i].cells.count-1 do
				(
					if dgAudios.rows.item[i].cells.item[j].EditedFormattedValue then
					(
						append _selectedChars #(_location, _cam, dgAudios.columns.item[j].headerCell.Value)
					)
				)

			)
			
			lb.progressBar.progressBarOpen useCaptions:true captionsWidth:200--abre la barra de progreso



			for c=1 to _selectedChars.count do
			(
				lb.progressBar.setProgressBarCaption _selectedChars[c][3]
				lb.progressBar.setProgressBarValue (c*(100.0/_selectedChars.count))
				--format "processAudio % % %\n" _selectedChars[c][1] _selectedChars[c][2] _selectedChars[c][3]
				_log += (processAudio _selectedChars[c][1] _selectedChars[c][2] _selectedChars[c][3])
			)
			lb.progressBar.progressBarClose()

			_dp = (GetDialogPos lb.audioExporter.rollMain)
			if _log != "" then
			(
				lb.message.show ("Audio Exported with some errors:\n\n" + _log) type:#message size:[300,75] pos:[_dp.x+(lb.audioExporter.rollMain.width/2.0)-150,_dp.y+(lb.audioExporter.rollMain.height/2.0)-37.5] modal:false
			)
			else
			(
				lb.message.show "Audio Exported correctly" type:#message size:[300,75] pos:[_dp.x+(lb.audioExporter.rollMain.width/2.0)-150,_dp.y+(lb.audioExporter.rollMain.height/2.0)-37.5] modal:false
			)
		)

		on dgAudios ColumnHeaderMouseDoubleClick sender e do
		(
			if dgAudios.columns.count > 2 and dgAudios.rows.count > 0 do
			(
				_columns = (if e.ColumnIndex < 2 then (for i=2 to dgAudios.columns.count-1 collect i) else #(e.ColumnIndex))
				if _columns.count > 0 do
				(
					_value = undefined
					for c in _columns do
					(
						for r=0 to (dgAudios.rows.count-1) where dgAudios.rows.item[r].cells.item[c].readonly == false do
						(
							if _value == undefined do
								_value = not dgAudios.rows.item[r].cells.item[c].value
							dgAudios.rows.item[r].cells.item[c].value = _value
						)
					)
				)
			)
		)
		
		------------------------------------------------
		--COMMON
		------------------------------------------------
		
		------------------------------------------------
		--@event: resized | Evento que se lanza al redimensionar el rollout.
		--@control: rollout | rollMain | El elemento que sufre la redimensión. El rollout principal de la herramienta.
		--@gets: point2 | size | tamaño al que se ha redimensionado el rollout
		------------------------------------------------
		on rollMainDef resized size do
		(
			resize size
		)
		
		------------------------------------------------
		--@event: open | Evento que se lanza al abrir el rollout.
		--@control: rollout | rollMain | El elemento que se abre. El rollout principal de la herramienta.
		------------------------------------------------
		on rollMainDef open do
		(
			loadSettings()
			createSceneEvents() --crea los callbacks
			if parent.rollMain != undefined then resize [parent.rollMain.width, parent.rollMain.height]
			initDataGridView()
		)
		
		------------------------------------------------
		--@event: close | Evento que se lanza al cerrar el rollout.
		--@control: rollout | rollMain | El elemento que se cierra. El rollout principal de la herramienta.
		------------------------------------------------
		on rollMainDef close do
		(
			removeSceneEvents() --elimina los callbacks
			saveSettings()
			
			parent.opened = false --indica que la herramienta está cerrada.
			updateToolbarButtons()
		)
	)--rollMainDef
	
	------------------------------------------------------------------------------------------------------------------------------------------------
	--@struct: templateTool | Contiene la herramienta plantilla.
	------------------------------------------------------------------------------------------------------------------------------------------------
	struct tl_audioExporter
	(
		------------------------------------------------------------------------------------------------
		--COMMON
		------------------------------------------------------------------------------------------------
		
		def = (classof this),				--@var: def | Almacena la definicion del struct.
		defFile = getThisScriptFilename(),	--@var: defFile | Almacena la ruta del propio archivo de script que contiene la definicion.
		
		category = #main,					--@var: category | Categoria de la tool.
		className = lb.getFileToolName (getThisScriptFilename() as string),	--@var: className | Nombre de la tool.
		description = "Tool plantilla",		--@var: description | Descripcion de la tool.
		
		cfgFile = (lb.config.getToolsIniPath()) + (lb.getFileToolName (getThisScriptFilename() as string)) + ".cfg",	--@var: cfgFile | Archivo de configuracion de la tool.
			
		opened = false,			--@var: opened | Indica si la herramienta está abierta.
			
		------------------------------------------------------------------------------------------------
		--VARIABLES
		------------------------------------------------------------------------------------------------
			
		------------------------------------------------------------------------------------------------
		--LIBRARIES
		------------------------------------------------------------------------------------------------
		
		------------------------------------------------------------------------------------------------
		--ROLLOUTS
		------------------------------------------------------------------------------------------------
		
		rollMain = rollMainDef,	--@var: rollMain | Almacena el rollout principal de la herramienta.
			
		------------------------------------------------------------------------------------------------
		--FUNCTIONS
		------------------------------------------------------------------------------------------------
			
		------------------------------------------------
		--GETS
		------------------------------------------------
		
		------------------------------------------------
		--SETS
		------------------------------------------------
		
		------------------------------------------------
		--OTHER
		------------------------------------------------
		
		------------------------------------------------
		--COMMON
		------------------------------------------------
		
		------------------------------------------------
		--@fn: boolean | isOpen | Devuelve información true o false, si la herramienta está abierta o cerrada.
		------------------------------------------------
		fn isOpen =
		(
			this.opened
		),
		
		------------------------------------------------
		--@fn: undefined | refreshInterface | Refresca el interface inicial de la herramienta
		------------------------------------------------
		fn refreshInterface =
		(
			--refresca el interface de la herramienta
		),
		
		------------------------------------------------
		--@fn: undefined | createInterface | Crea el interface inicial de la herramienta
		------------------------------------------------
		fn createInterface =
		(
			--crea el interface, lo redimensiona y lo reposiciona
			createDialog this.rollMain lockwidth:false lockheight:false pos:[-10000,0] style:#(#style_toolwindow, #style_titlebar, #style_sysmenu, #style_resizing)
		),
		
		------------------------------------------------
		--@fn: undefined | destroyInterface | Destruye el interface de la herramienta.
		------------------------------------------------
		fn destroyInterface =
		(
			destroyDialog this.rollMain --cierra la herramienta.			
		),--destroyInterface
		
		------------------------------------------------
		--@fn: undefined | run | Lanza la herramienta.
		------------------------------------------------
		fn run =
		(
			this.createInterface() --crea el interface.
			this.opened = true --indica que la herramienta está abierta
		),--execute
		
		------------------------------------------------
		--@fn: undefined | close | Cierra la herramienta.
		------------------------------------------------
		fn close =
		(
			this.destroyInterface() --destruye el interface.
			this.opened = false --indica que la herramienta está cerrada.
		),
		
		------------------------------------------------
		--@fn: undefined | initSubLibraries | Inicializa todas las sublibrerías en el orden establecido.
		------------------------------------------------
		fn initSubLibraries =
		(
			_subLibraries = #()
			
			for sl in _subLibraries do sl.init()
		),
		
		------------------------------------------------
		--@fn: undefined | init | Inicializa la librería.
		------------------------------------------------
		fn init =
		(		
			this.initSubLibraries() --inicialza las librerías hijas
		),		
		
		------------------------------------------------------------------------------------------------
		--EVENTS
		------------------------------------------------------------------------------------------------
		
		------------------------------------------------
		--@event: create | Ejecución al crearse la instancia del struct.
		------------------------------------------------
		on create do
		(
			lb.addTool this --añade la tool a la libreria principal	
		)		
		
	)--tl_audioExporter
	
	------------------------------------------------------------------------------------------------------------------------------------------------
	--EXECUTION
	------------------------------------------------------------------------------------------------------------------------------------------------	
	
	tl_audioExporter() --crea la herramienta
)